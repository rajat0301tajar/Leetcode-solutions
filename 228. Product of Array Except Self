Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& A) {
        int n = A.size();
        int left[n]; int right[n];
        memset(left,0,sizeof(left));
        memset(right,0,sizeof(right));
        left[0] = A[0];
        for(int i = 1; i < n; i++){
            left[i] = A[i] * left[i - 1];
        }
        right[n - 1] = A[n - 1];
        for(int i = n - 2; i >= 0; i--){
            right[i] = A[i] * right[i + 1];
        }
        vector<int>ret(n);
        ret[0] = right[1];
        ret[n - 1] = left[n - 2];
        for(int i = 1; i < n - 1; i++){
            ret[i] = left[i - 1] * right[i + 1];
        }
        return ret;
    }
};
