We have a set of items: the i-th item has value values[i] and label labels[i].

Then, we choose a subset S of these items, such that:

    |S| <= num_wanted
    For every label L, the number of items in S with label L is <= use_limit.

Return the largest possible sum of the subset S.

 

Example 1:

Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth item.

Example 2:

Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third item.

Example 3:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1
Output: 16
Explanation: The subset chosen is the first and fourth item.

Example 4:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2
Output: 24
Explanation: The subset chosen is the first, second, and fourth item.

 

Note:

    1 <= values.length == labels.length <= 20000
    0 <= values[i], labels[i] <= 20000
    1 <= num_wanted, use_limit <= values.length
------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int largestValsFromLabels(vector<int>& values, vector<int>& labels, int num_wanted, int use_limit) {
        
        map<int,vector<int>>mp;  //--> sorted according to values
        int n = labels.size();
        unordered_map<int,int>labelcnt;
        unordered_map<int,int>cnt;
        unordered_map<int,int>valcnt;
        unordered_map<int,int>vc;
        for(int i =0 ; i < n ;i++){
            
            mp[values[i]].push_back(labels[i]);
            cnt[labels[i]]++;
            valcnt[values[i]]++;
        }
        
        int ans = 0;
        vector<int>v (values.begin(),values.end());
        sort(v.rbegin(),v.rend());
        v.erase(unique(v.begin(),v.end()),v.end());
        int used =0 ;
        for(int i =0 ;i < n;i++){
            int x = v[i];
            vector<int> temp (mp[x].begin(),mp[x].end());
            for(auto label : temp){
                cout<<"*"<<label<<endl;
            if(labelcnt[label] < min(use_limit,cnt[label]) && vc[x]<valcnt[x]){
                ans += x;
                vc[x]++;
                cout<<"val = "<<x<<endl;
                labelcnt[label]++;
                cout<<labelcnt[label]<<endl;
                used ++;
                if(used == num_wanted){
                    return ans;
                }
            }
            }
        }
        return ans;
    }
};
