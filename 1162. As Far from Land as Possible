Given an N x N grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized and return the distance.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

If no land or water exists in the grid, return -1.
Input: [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: 
The cell (1, 1) is as far as possible from all the land with distance 2.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int dirs[4][2] = {{-1,0},{0,-1},{1,0},{0,1}};

    int maxDistance(vector<vector<int>>& grid) {
        queue<vector<int>>q;
        set<pair<int,int>>st;
        int dist[100][100];
        int ones = 0;
        int n = grid.size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 1){    
                    q.push({i,j,0});
                    st.insert({i,j});
                    dist[i][j] = 0;
                    ones++;
                }
                else{
                    dist[i][j] = 999999;
                }
            }
        }
        if(ones == 0) return -1;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                vector<int>temp = q.front();
                q.pop();
                int x = temp[0];
                int y = temp[1];
                int d = temp[2];
                for(auto dir : dirs){
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if(st.count({nx,ny})) continue;
                    if(nx < 0 || ny < 0 || nx >= n || ny >= n) continue;
                    dist[nx][ny] = min(1 + d , dist[nx][ny]);
                    q.push({nx,ny,dist[nx][ny]});
                    st.insert({nx,ny});
                }
            }
        }
        int ret = -1;
        for(int i = 0; i < n; i++){
            for(int j = 0 ; j < n; j++){
                if(grid[i][j] == 0){
                    ret = max(ret, dist[i][j]);
                    //cout<<dist[i][j]<<" ";
                }
            }
        }
        //cout<<endl;
        return ret;
    }
};
