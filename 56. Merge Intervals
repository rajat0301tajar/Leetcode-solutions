Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.
-------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef pair<int,int> pii;
    typedef vector<pii> vpii;
    bool overlap(vector<int> &a,vector<int> &b){
        if(a[0] >= b[0] && a[0] <= b[1]){
            return true;
        }
        if(a[1] >= b[0] && a[1] <= b[1]){
            return true;
        }
        if(b[0] >= a[0] && b[0] <= a[1]){
            return true;
        }
        if(b[1] >= a[0] && b[1] <= a[1]){
            return true;
        }
        if(a[0] <= b[0] && a[1] >= b[1]){
            return true;
        }
        if(b[0] <= a[0] && b[1] >= a[1]){
            return true;
        }
        return false;
    }
    set<pii>st;
    vector<vector<int>>ret;
    
    void dfs(map<pii, vpii> &g, pii u, pii &ans){
        if(st.count(u)) return;
        st.insert(u);
        auto adjU = g[u];
       // cout<<"["<<u.first<<" "<<u.second<<"]";
        for(int i = 0; i < adjU.size(); i++){
            pii x = adjU[i];
            ans.first = min(ans.first, x.first);
            ans.second = max(ans.second, x.second);
            dfs(g, x, ans);
        }
    }
    
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        map<pii, vpii>g;
        int n = intervals.size();
        for(int i = 0; i < n; i++){
            pii p1 = {intervals[i][0], intervals[i][1]};
            for(int j = i + 1; j < n; j++){
                pii p2 = {intervals[j][0], intervals[j][1]};
                if(overlap(intervals[i], intervals[j])){
                    g[p1].push_back(p2);
                    g[p2].push_back(p1);
                }
            }
        }
        
        for(auto I : intervals){
            pii x = {I[0], I[1]};
            if(!st.count(x)){
                pii temp = x;
                dfs(g, x, temp); //cout<<"******"<<endl;
                ret.push_back({temp.first, temp.second});
            }
        }
        return ret;
    }
};
