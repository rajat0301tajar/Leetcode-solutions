In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:

Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.

-----------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int>w(n - k + 1,0);
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
            if(i >= k) sum -= nums[i - k];
            if(i >= k - 1) w[i - k + 1] = sum;
        }
        int sz = w.size();
        vector<int>left(sz ,0);
        vector<int>right(sz ,0);
        int best = 0;
        for(int i = 0; i < w.size(); i++){
            if(w[best] < w[i]) best = i;
            left[i] = best;
        }
        best = w.size() - 1;
        for(int i = w.size() - 1; i >= 0; i--){
            if(w[best] <= w[i]) best = i;
            right[i] = best;
        }
        vector<int>ans(3, -1);
        for(int j = k; j < w.size() - k; j++){
            int i = left[j - k]; int k1 = right[j + k];
            if(ans[0] == -1 || w[ans[0]] + w[ans[1]] + w[ans[2]] < w[i] + w[j] + w[k1]){
                ans[0] = i;
                ans[1] = j;
                ans[2] = k1;
            }
        }
        return ans;
    }
};
