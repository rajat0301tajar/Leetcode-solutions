Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
-----------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.size() == 0) return {};
        int n = matrix.size();
        int m = matrix[0].size();
        vector<int>ret;
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        int x = 0, y = 0; int dir = 0;
        int dirs[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
        for(int i = 0; i < m * n; i++){
            visited[x][y] = true;
            ret.push_back(matrix[x][y]);
            int nx = x + dirs[dir][0];
            int ny = y + dirs[dir][1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m || visited[nx][ny]){
                dir = (dir + 1) % 4;
                x += dirs[dir][0];
                y += dirs[dir][1];
            }
            else{
                x = nx; 
                y = ny;
            }
        }
        return ret;
    }
};
