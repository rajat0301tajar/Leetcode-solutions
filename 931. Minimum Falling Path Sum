Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.

 

Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:

    [1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
    [2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
    [3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]

The falling path with the smallest sum is [1,4,7], so the answer is 12.

 

Note:

    1 <= A.length == A[0].length <= 100
    -100 <= A[i][j] <= 100
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef long long ll;
    ll ans=INT_MAX;
    ll dp[101][101];
    ll dfs(vector<vector<int>>&A,int x,int y){
        int n=A.size();
        if(x<0 || y<0 || x>=n || y>=n){//|| x>A.size() || y>A.size()){
            return INT_MAX;
        }
        if(x==n-1){
            return A[x][y];
        }
        if(dp[x][y]!=-1)
            return dp[x][y];
        
        return dp[x][y]=A[x][y] + min(dfs(A,x+1,y-1),min(dfs(A,x+1,y),dfs(A,x+1,y+1)));
    }
    int minFallingPathSum(vector<vector<int>>& A) {
        memset(dp,-1,sizeof(dp));
        for(int j=0;j<A[0].size();j++){
            ans=min(ans,dfs(A,0,j));
        }
        return ans;
    }
};
