Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:

Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].

Example 2:

Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].

Example 3:

Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.

 

Constraints:

    1 <= arr1.length, arr2.length <= 2000
    0 <= arr1[i], arr2[i] <= 10^9
--------------------------------------------------------------------------------------------------------------------------------------------------------------
const int N = 2e3 + 10;
int dp[N][2 * N];
class Solution {
public:
    int n, m;
    vector<int>a, A, C;
    unordered_map<int,int>B;
    // return min swaps to make a[pos...n - 1] strictly increasing with allowed swaps from A[idx...m - 1]
    int solve(int pos, int idx){
        if(pos == n) return 0;
        if(dp[pos][idx] >= 0) return dp[pos][idx];
        int ret = 1 << 30;
        if(a[pos] > A[idx]){
            // no swap
            int k = B[a[pos]];
            ret = min(ret, solve(pos + 1, k));
        }
        // with swap
        auto it = lower_bound(C.begin(), C.end(), idx + 1);
        if(it != C.end()){
            ret = min(ret, 1 + solve(pos + 1, *it));
        }
        return dp[pos][idx] = ret;
    }
    int makeArrayIncreasing(vector<int>& a, vector<int>& b) {
        this->a = a;
        this->A = a;
        for(auto it : b) A.push_back(it);
        A.push_back(-1);
        sort(A.begin(),A.end());
        A.erase(unique(A.begin(),A.end()), A.end());
        n = a.size(); m = A.size();
        memset(dp, -1, sizeof(dp));
        sort(b.begin(),b.end());
        B.clear();
        for(int i = 1; i < m; i++){
            B[A[i]] = i;
            auto it = lower_bound(b.begin(),b.end(),A[i]);
            if(it != b.end() && *it == A[i]){
                C.push_back(i);
            }
        }
        int ret = solve(0,0);
        if(ret == (1 << 30)) ret = -1;
        return ret;
    }
};
