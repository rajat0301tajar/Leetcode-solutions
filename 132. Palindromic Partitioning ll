Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:

Input: "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
-------------------------------------------------------------------------------------------------------------
class Solution {
public:
    
    class Solution {
public:
    int minCut(string s) {
        int n = s.size();
        vector<int> cut(n + 1, 0);
        for(int i = 0; i <= n; i++) cut[i] = i - 1;
        for(int i = 0; i < n; i++){
            // odd palindromes.
            for(int j = 0; i - j >= 0 && i + j < n && s[i - j] == s[i + j]; j++){
                cut[i + j + 1] = min(cut[i + j + 1], 1 + cut[i - j]);
            }
            // even palindromes.
            for(int j = 1; i - j + 1 >= 0 && i + j < n && s[i - j + 1] == s[i + j]; j++){
                cut[i + j + 1] = min(cut[i + j + 1], 1 + cut[i - j + 1]);
            }
        }
        return cut[n];
    }
};

    int minCut(string s) {
        //dp[i][j] = min partitions of s[i...j] to make each partition palindrome.
        //dp[i][j] = 1 + min over all k (dp[i][k - 1], dp[k][j]);
        int n = s.size();
        int dp[n][n]; bool P[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                dp[i][j] = 1 << 30;
                P[i][j] = false;
            }
        }
        for(int i = 0; i < n; i++) {
            dp[i][i] = 0;
            P[i][i] = true;
        }
        for(int i = 1; i < n; i++){
            if(s[i] == s[i - 1]) {
                P[i - 1][i] = true;
                dp[i - 1][i] = 0;
            }
            else
                dp[i - 1][i] = 1;
        }
        for(int l = 3; l <= n; l++){
            for(int i = 0; i < n - l + 1; i++){
                int j = i + l - 1;
                if(s[i] == s[j] && P[i + 1][j - 1]){
                    P[i][j] = true;
                    dp[i][j] = 0;
                }
                else{
                    for(int k = i + 1; k <= j; k++){
                        dp[i][j] = min(dp[i][j], 1 + dp[i][k - 1] + dp[k][j]);
                    }
                }
            }
        }
       
        return dp[0][n - 1];
    }
};
