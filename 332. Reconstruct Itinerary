Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:

    If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
    All airports are represented by three capital letters (IATA code).
    You may assume all tickets form at least one valid itinerary.

Example 1:

Input: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Output: ["JFK", "MUC", "LHR", "SFO", "SJC"]

Example 2:

Input: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output: ["JFK","ATL","JFK","SFO","ATL","SFO"]
Explanation: Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"].
             But it is larger in lexical order.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach : Print the Eulerian path covering every edge once.
class Solution {
public:
    vector<string> findItinerary(vector<vector<string>>& tickets) {
        map<string,vector<string>>g;
        set<string>st;
        for(auto x : tickets){
            g[x[0]].push_back(x[1]);
            st.insert(x[0]);
            st.insert(x[1]);
        }
        map<string,int>count_edges;
        for(auto x : st){
            count_edges[x] = g[x].size();
            sort(g[x].rbegin(),g[x].rend());
        }
        stack<string>curr_path;
        vector<string> circuit;
        curr_path.push("JFK");
        string curr_v = "JFK";
        while(!curr_path.empty()){
            if(count_edges[curr_v]){
                curr_path.push(curr_v);
                string next_v = g[curr_v].back();
                count_edges[curr_v]--;
                g[curr_v].pop_back();
                curr_v = next_v;
            }
            else{
                circuit.push_back(curr_v);
                curr_v = curr_path.top();
                curr_path.pop();
            }
        }
        reverse(circuit.begin(),circuit.end());
        return circuit;
    }
};

Recursive approach --> 
class Solution {
        unordered_map<string, priority_queue<string, vector<string>, greater<string>>> graph;
        vector<string> result;
        void dfs(string vtex)
        {
            auto & edges = graph[vtex];
            while (!edges.empty())
            {
                string to_vtex = edges.top();
                edges.pop();
                dfs(to_vtex);
            }
            result.push_back(vtex);
        }
    public:
        vector<string> findItinerary(vector<pair<string, string>> tickets) {
            for (auto e : tickets)
                graph[e.first].push(e.second);
            dfs("JFK");
            reverse(result.begin(), result.end());
            return result;
        }
    };
