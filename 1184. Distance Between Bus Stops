A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given start and destination stops.

 

Example 1:
Input: distance = [1,2,3,4], start = 0, destination = 1
Output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int distanceBetweenBusStops(vector<int>& d, int start, int dest) {
        int ret = INT_MAX; int n = d.size();
        int curr1 = 0;
        for(int i = start; i != dest; i = (i + 1) % n){
            curr1 += d[i % n];
        }
        int curr2 =0;
        for(int i = dest; i != start; i = (i + 1) % n){
            curr2 += d[i % n];
        }
        ret = min(curr1, curr2);
        return ret;
    }
};
