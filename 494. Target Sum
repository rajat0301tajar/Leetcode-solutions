 You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:

Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int n = nums.size();
        int sum = 0;
        for(int i = 0; i < n; i++){
            sum += nums[i];
        }
        if(S > sum || S < -sum){
            return 0;
        }
        int dp[n + 1][2 * sum + 1];
        memset(dp,0,sizeof(dp));
        // dp[i][j] = no of ways to get Sum = j - sum using first i elements.
        dp[0][sum] = 1;
        for(int i = 1; i <= n; i++){
            for(int j = 0; j < 2 * sum + 1; j++){
                if(j - nums[i - 1] >= 0)
                    dp[i][j] += dp[i - 1][j - nums[i - 1]];
                if(j + nums[i - 1] < 2 * sum + 1)
                    dp[i][j] += dp[i - 1][j + nums[i - 1]];
            }
        }
        return dp[n][sum + S];
    }
};
