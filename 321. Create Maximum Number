Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits.

Note: You should try to optimize your time and space complexity.

Example 1:

Input:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
Output:
[9, 8, 6, 5, 3]

Example 2:

Input:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
Output:
[6, 7, 6, 0, 4]

Example 3:

Input:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
Output:
[9, 8, 9]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Approach : Greedy : We divide the k digits required into two parts, i and k-i. We then find the maximum number of length i in one array and the maximum number of length k-i in the other array using the algorithm in section 1. Now we combine the two results in to one array using the algorithm in section 2. After that we compare the result with the result we have and keep the larger one as final answer.
class Solution {
public:
    // when we need to make largest k digit number using only 1 array.
    vector<int> maxArray(vector<int> &nums, int k){
        int n = nums.size();
        vector<int>ans(k, 0);
        for(int i = 0, j = 0; i < n; i++){ // j index for included elements in ans.
            while(n - i + j > k && j > 0 && ans[j - 1] < nums[i]){ // n - i left over elements to be seen, j already included.
                j--;
            }
            if(j < k) ans[j++] = nums[i];
        }
        return ans;
    }
    bool greater(vector<int> &nums1, int i, vector<int> &nums2, int j){
        while(i < nums1.size() && j < nums2.size() && nums1[i] == nums2[j]){
            i++; j++;
        }
        return j == nums2.size() || (i < nums1.size() && nums1[i] > nums2[j]);
    }
    // for the case when we need to make largest no using all digits of both array.
    vector<int> merge(vector<int> &nums1, vector<int> &nums2, int k){
        vector<int>ans(k, 0);
        for(int i = 0, j = 0, r = 0; r < k; r++)
            ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];
        return ans;
    }
    vector<int> maxNumber(vector<int>& a, vector<int>& b, int k) {
        int n = a.size();
        int m = b.size();
        vector<int>ans(k);
        // i = no of elements in a.
        for(int i = max(0, k - m); i <= k && i <= n; i++){
            auto v1 = maxArray(a, i);
            auto v2 = maxArray(b, k - i);
            vector<int> candidate = merge(v1, v2, k);
            if(greater(candidate, 0, ans, 0)) ans = candidate;
        }
        return ans;
    }
};
