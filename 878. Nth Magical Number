A positive integer is magical if it is divisible by either A or B.

Return the N-th magical number.  Since the answer may be very large, return it modulo 10^9 + 7.

 

Example 1:

Input: N = 1, A = 2, B = 3
Output: 2

Example 2:

Input: N = 4, A = 2, B = 3
Output: 6

Example 3:

Input: N = 5, A = 2, B = 4
Output: 10

Example 4:

Input: N = 3, A = 6, B = 4
Output: 8

 

Note:

    1 <= N <= 10^9
    2 <= A <= 40000
    2 <= B <= 40000

-------------------------------------------------------------------------------------------------------------------
const int mod = 1e9 + 7;
class Solution {
public:
   
    typedef long long int64;
    bool check(int64 n, int64 f, int64 a, int64 b){
        int64 lcm = a * b / __gcd(a, b);
        return n / a + n / b - n / lcm >= f;
    }
    int nthMagicalNumber(int n, int a, int b) {
        int64 l = 1; int64 r = 1e18;
        int64 lcm = a * b / __gcd(a, b);
        while(l < r){
            int64 mid = (l + r) / 2;
            //if(mid / a + mid / b - mid / lcm < n){   // n n n n y y y y y --> want first yes.
                //r = mid;
            if(check(mid, n, a, b)){
                r = mid;
            }
            else
                l = mid + 1; //l = (mid + 1);
        }
        return l % mod;
    }
};
