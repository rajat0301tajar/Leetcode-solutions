On a 2-dimensional grid, there are 4 types of squares:

    1 represents the starting square.  There is exactly one starting square.
    2 represents the ending square.  There is exactly one ending square.
    0 represents empty squares we can walk over.
    -1 represents obstacles that we cannot walk over.

Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:

Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:

Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:

Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.

 

Note:

    1 <= grid.length * grid[0].length <= 20
------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int helper(vector<vector<int>>&grid,int c,int i,int j,int endi,int endj,bool visited[20][20])
    {
        if(i>=grid.size() || j>=grid[0].size() || i<0 || j<0 || grid[i][j]==-1 || visited[i][j])
            return 0;
        
        
        if(i==endi && j==endj && c==0)
            return 1;
        else if(i==endi && j==endj && c!=0)
            return 0;
        visited[i][j]=true;
        int ans1,ans2,ans3,ans4;
        if(grid[i][j]==0){
        ans1=helper(grid,c-1,i+1,j,endi,endj,visited);
        ans2=helper(grid,c-1,i,j+1,endi,endj,visited);
        ans3=helper(grid,c-1,i-1,j,endi,endj,visited);
        ans4=helper(grid,c-1,i,j-1,endi,endj,visited);
        }
        else{
        ans1=helper(grid,c,i+1,j,endi,endj,visited);
        ans2=helper(grid,c,i,j+1,endi,endj,visited);
        ans3=helper(grid,c,i-1,j,endi,endj,visited);
        ans4=helper(grid,c,i,j-1,endi,endj,visited);

        }
        visited[i][j]=false;
        return ans1+ans2+ans3+ans4;
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        bool visited[20][20];
        memset(visited,false,sizeof(visited));
        int starti=-1,startj=-1;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    starti=i;
                    startj=j;
                    break;
                }
            }
            if(starti!=-1)
                break;
        }
        int endi=-1,endj=-1;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                    endi=i;
                    endj=j;
                    break;
                }
            }
            if(endi!=-1)
                break;
        }
        int c=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==0)
                    c++;
            }
        }
        return helper(grid,c,starti,startj,endi,endj,visited);
        }
};
