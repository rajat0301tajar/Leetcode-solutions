

Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:

Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"

 

Constraints:

    1 <= s.length <= 10^5
    2 <= k <= 10^4
    s only contains lower case English letters.
---------------------------------------------------------------------------------------------------------------
class Solution {
public:
    string removeDuplicates(string s, int k) {
        string ret = "";
        int i = 0; int n = s.size();
        bool f = false;
        while(i < n){
            string temp = "";
            char c = s[i];
            int j = i + 1; int cnt = 0;
            
            while(j < n & s[j] == c && (cnt + 1) < k){
                cnt++; j++;
                temp += c;
            }
            if(cnt + 1 == k){
                f = true;
                ret += removeDuplicates(s.substr(j, n - j), k);
                //return ret;
                break;
            }
            else{
                temp = c + temp;
                ret += temp;
            }
            i = j;
        }
        if(f == false) return ret;
        ret = removeDuplicates(ret, k);
        return ret;
    }
};
