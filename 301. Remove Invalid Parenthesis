Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Example 1:

Input: "()())()"
Output: ["()()()", "(())()"]

Example 2:

Input: "(a)())()"
Output: ["(a)()()", "(a())()"]

Example 3:

Input: ")("
Output: [""]
-----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    bool isValid(string s){
        int count = 0;
        for(auto c : s){
            if(c == '(') count++;
            if(c == ')') count--;
            if(count < 0) return false;
        }
        return count == 0;
    }
    vector<string> removeInvalidParentheses(string s) {
        vector<string>ret;
        unordered_set<string>st;
        queue<string>q;
        q.push(s);
        while(!q.empty()){
            int sz = q.size();
            while(sz --){
                string temp = q.front(); q.pop();
                if(isValid(temp)){
                    ret.push_back(temp);
                    continue;
                } 
                for(int i = 0; i < temp.size(); i++){
                    if(temp[i] != '(' && temp[i] != ')') continue;
                    string x = temp.substr(0,i) + temp.substr(i + 1, temp.size() - i - 1);
                    if(st.find(x) != st.end()) continue;
                    q.push(x);
                    st.insert(x);
                }
            }
            if(ret.size() > 0){
                break;
            }
        }
        return ret;
    }
};
