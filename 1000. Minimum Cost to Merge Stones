There are N piles of stones arranged in a row.  The i-th pile has stones[i] stones.

A move consists of merging exactly K consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these K piles.

Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return -1.

 

Example 1:

Input: stones = [3,2,4,1], K = 2
Output: 20
Explanation: 
We start with [3, 2, 4, 1].
We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
We merge [4, 1] for a cost of 5, and we are left with [5, 5].
We merge [5, 5] for a cost of 10, and we are left with [10].
The total cost was 20, and this is the minimum possible.

Example 2:

Input: stones = [3,2,4,1], K = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.

Example 3:

Input: stones = [3,5,1,2,6], K = 3
Output: 25
Explanation: 
We start with [3, 5, 1, 2, 6].
We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].
We merge [3, 8, 6] for a cost of 17, and we are left with [17].
The total cost was 25, and this is the minimum possible.
--------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int mergeStones(vector<int>& stones, int K) {
        
        int n=stones.size();
        if((n-1) % (K-1) !=0)
            return -1;
        // for K=2 (3,2,4,1)-->(5,4,1)-->(5,5)-->(10)---> ans=20
        // suppose we have the minimum cost of merging the stones from index i to j into 1 pile
        // and denoted by dp[i][j] , then for the case of K=2 
        // dp[i][j]=min over k (dp[i][k] + dp[k+1][j] + cost[i...k...j]) where i<=k<j
        // and final answer would be dp[0][n-1];
        // now in our case we want minimum cost on, merging st. we can merge K consective piles
        // which forces us to take into consideration the piles combined also
        // hence lets define dp[i][j][k] which denotes the minimum cost of merging the stone
        long long dp[n][n][K+1];
        // piles from index i till j into k stone piles hence we can define:
        // dp[i][i][1]=0 for all i and rest all entries initialized to INT_MAX
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=1;k<=K;k++){
                    dp[i][j][k]=INT_MAX;
                }
            }
        }
        for(int i=0;i<n;i++){
            dp[i][i][1]=0;
        }
        
        long long prefixSum[n];
        prefixSum[0]=stones[0];
        for(int i=1;i<n;i++){
            prefixSum[i]= stones[i] + prefixSum[i-1];
        }
        // dp[i][j][k]=min over t (dp[i][t][1] + dp[t+1][j][k-1] )
        // hence dp[i][j][1] = dp[i][j][k] + cost[i.....j]
        // where i<=t<j and final answer would be equal to dp[0][n-1][1]
        for(int l=2;l<=n;l++){
            for(int i=0;i<n-l+1;i++){
                int j=i+l-1;
                for(int t=i;t<j;t++){
                    for(int k=2;k<=K;k++){
                       dp[i][j][k]=min(dp[i][j][k], dp[i][t][1] + dp[t+1][j][k-1]);
                    }
                }
                if(i>=1)
                dp[i][j][1]=dp[i][j][K] + prefixSum[j]- prefixSum[i-1];
                else
                dp[i][j][1]=dp[i][j][K] + prefixSum[j];
            }
        }
        return dp[0][n-1][1];
    }
};
