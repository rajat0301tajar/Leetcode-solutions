There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.

EXAMPLE:
Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.

 

Constraints:

    1 <= n <= 10^5
    n-1 <= connections.length <= 10^5
    connections[i][0] != connections[i][1]
    There are no repeated connections.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const int N = 1e5;
class Solution {
public:    
    map<int,vector<int>>g;
    bool visited[N];
    int low[N], disc[N];
    int parent[N];
    int time;
    vector<vector<int>>ret;
    
    void dfs(int u){
        visited[u] = true;
        disc[u] = low[u] = ++time;
        vector<int> adj = g[u];
        int childCount = 0;
        for(auto v : adj){
            if(!visited[v]){
                //childCount++;
                parent[v] = u;
                dfs(v);
                low[u] = min(low[u], low[v]);
                /*if(parent[u] == -1 && childCount > 1){
                    ap[u] = true;
                }*/
                /*if(parent[u] != -1 && disc[u] <= low[v]){
                    ap[u] = true;
                }*/
                if(disc[u] < low[v]){ // difference in comparison important.
                    ret.push_back({u,v});
                }
            }
            else if(v != parent[u]){
                low[u] = min(low[u], disc[v]);
            }
        }
    }
    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        for(auto x : connections){
            g[x[0]].push_back(x[1]);
            g[x[1]].push_back(x[0]);
        }
        time = 0;
        for(int i = 0; i < n; i++){
            visited[i] = false;
            low[i] = 1 << 30;
            disc[i] = 1 << 30;
            parent[i] = -1;
        }
        dfs(0);
        return ret;
    }
};
