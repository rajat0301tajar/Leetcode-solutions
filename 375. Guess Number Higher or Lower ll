We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number I picked is higher or lower.

However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.

Example:

n = 10, I pick 8.

First round:  You guess 5, I tell you that it's higher. You pay $5.
Second round: You guess 7, I tell you that it's higher. You pay $7.
Third round:  You guess 9, I tell you that it's lower. You pay $9.

Game over. 8 is the number I picked.

You end up paying $5 + $7 + $9 = $21.

Given a particular n â‰¥ 1, find out how much money you need to have to guarantee a win.
-----------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int getMoneyAmount(int n) {
        // dp[i][j] = minimum money to guess for the range A[i...j];
        // dp[i][j] = min over all k from i to j included (k + max(dp[i][k - 1], dp[k + 1][j]));
        // ans = dp[1][n];
        int dp[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                dp[i][j] = 1 << 30;
            }
        }
        for(int i = 0; i < n; i++){
            dp[i][i] = 0;
        }
        for(int l = 2; l <= n; l++){
            for(int i = 0; i < n - l + 1; i++){
                int j = i + l - 1;
                for(int k = i; k <= j; k++){
                    dp[i][j] = min(dp[i][j], (k + 1) + max( k - 1 >= i ? dp[i][k - 1] : 0, k + 1 < j ? dp[k + 1][j] : 0));
                }
            }
        }
        return dp[0][n - 1];
    }
};
