Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.

Example:

Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2 
Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2,
             and 2 is the max number no larger than k (k = 2).
------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int maxSumSubmatrix(vector<vector<int>>& A, int K) {
       
        int n = A.size();
         if(n == 0) return 0;
        int m = A[0].size();
        int row[n]; // contains sum of elements in i th row between different column boundaries.
        int ret = -99999;
        for(int i = 0; i < m; i++){
            memset(row,0,sizeof(row));
            for(int j = i; j < m; j++){
                for(int k = 0; k < n; k++){
                    row[k] += A[k][j];
                }
                /*for(int k = 0; k < n; k++){
                cout<<row[k]<<" ";
                }*/
                //cout<<endl;
                // row[i's] calculated for the given 2 column indexes as bound.
                set<int>st;
                st.insert(0);
                int cur = 0; // stores the running sum of the row array.
                for(int k = 0; k < n; k++){
                    cur += row[k];
                    auto x = st.lower_bound(cur - K); // will give either equal or next larger element's iterator both in set and map.
                    if(x != st.end())
                    ret = max(ret, cur - *x);
                    //cout<<ret<<endl;
                    st.insert(cur);
                }
            }
        }
         return ret;
    }
};
