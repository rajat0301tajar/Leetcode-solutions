#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
typedef pair<int,int> pii;
int dist[1000][1000];
int dirs[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};
int getMinSteps(char A[3][3], int x, int y, int dx, int dy){
    queue<pii>q;
    q.push({x, y});
    dist[x][y] = 0;
    while(!q.empty()){
        int sz = q.size();
        while(sz--){
            auto temp = q.front();
            q.pop();
            int x = temp.first;
            int y = temp.second;
            if(x == dx && y == dy){
                return dist[x][y];
            }
            for(auto dir : dirs){
                int nx = x + dir[0];
                int ny = y + dir[1];
                if(nx < 0 || ny < 0 || nx >= 3 || ny >= 3) continue;
                if(dist[nx][ny] >= 0) continue;
                if(A[nx][ny] == 'P') continue;
                q.push({nx, ny});
                dist[nx][ny] = 1 + dist[x][y];
            }
        }
    }
    return -1;
}
int main(){
    char A[3][3] = {{'O','R','O'},{'P','P','O'},{'E','O','O'}};
    int x1 = -1, y1 = -1; int x2 = -1, y2 = -1;
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < 3; j++){
            if(A[i][j] == 'R'){
                x1 = i;
                y1 = j;
            }
            if(A[i][j] == 'E'){
                x2 = i;
                y2 = j;
            }
        }
    }
    memset(dist, -1, sizeof(dist));
    cout<<getMinSteps(A, x1, y1, x2, y2);
    return 0;
}
