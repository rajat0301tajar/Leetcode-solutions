Given an array A of strings, find any smallest string that contains each string in A as a substring.

We may assume that no string in A is substring of another string in A.
 

Example 1:

Input: ["alex","loves","leetcode"]
Output: "alexlovesleetcode"
Explanation: All permutations of "alex","loves","leetcode" would also be accepted.

Example 2:

Input: ["catg","ctaagt","gcta","ttca","atgcatc"]
Output: "gctaagttcatgcatc"
-------------------------------------------------------------------------------------------------------------------------
Program to only calculate the length of the superstring.
const int N = 12;
int dp[1 << N][N];
int g[N][N];
class Solution {
public:
    
    int calc(string s, string t){ // return no of extra characters to be appended to s for t.
        int n = s.size(); int m = t.size();
        for(int k = 1; k < n; k++){
            if(s.substr(k) == t.substr(0, n - k)){
                return m - n + k;
            }
        }
        return m;
    }
    int solve(int mask, int k, int n){
        if(mask == (1 << n) - 1){
            return 0;
        }
        if(dp[mask][k] >= 0){
            return dp[mask][k];
        }
        int ret = 1 << 30;
        for(int i = 0; i < n; i++){
            if(mask & (1 << i)){
                continue;
            }
            ret = min(ret, g[k][i] + solve((mask | (1 << i)), i, n));
        }
        return dp[mask][k] = ret;
    }
    string shortestSuperstring(vector<string>& A) {
        int n = A.size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                g[i][j] = calc(A[i],A[j]);
            }
        }
        memset(dp,-1,sizeof(dp));
        int ret = 1 << 30;
        for(int i = 0; i < n; i++){ // to get the start string.
            ret = min(ret, (int)A[i].size() + solve(1 << i, i, n));
        }
        cout<<ret<<endl;
        return "rajat";
    }
};

Modified program to get the path --> ie the superstring also.
const int N = 12;
int dp[1 << N][N];
int g[N][N];
int path[1 << N][N];
class Solution {
public:
    
    int calc(string s, string t){ // return no of extra characters to be appended to s for t.
        int n = s.size(); int m = t.size();
        for(int k = 1; k < n; k++){
            if(n - k < m && s.substr(k) == t.substr(0, n - k)){
                return m - n + k;
            }
        }
        return m;
    }
    int solve(int mask, int k, int n){
        if(mask == (1 << n) - 1){
            return 0;
        }
        if(dp[mask][k] >= 0){
            return dp[mask][k];
        }
        int ret = 1 << 30;
        for(int i = 0; i < n; i++){
            if(mask & (1 << i)){
                continue;
            }
            if(ret > g[k][i] + solve((mask | (1 << i)), i, n)){
                ret = g[k][i] + solve((mask | (1 << i)), i, n);
                path[mask][k] = i;
            }
        }
        return dp[mask][k] = ret;
    }
    string shortestSuperstring(vector<string>& A) {
        int n = A.size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(i == j) continue;
                g[i][j] = calc(A[i],A[j]);
            }
        }
        memset(dp,-1,sizeof(dp));
        int ret = 1 << 30; int best_i = -1;
        for(int i = 0; i < n; i++){ // to get the start string.
            if(ret > (A[i].size() + solve(1 << i, i, n))){
                ret = A[i].size() + solve(1 << i, i, n);
                best_i = i;
            }
        }
        string ans = A[best_i]; int mask = 1 << best_i;
        for(int i = best_i; mask != (1 << n) - 1;){
            int j = path[mask][i];
            ans += A[j].substr(A[j].size() - g[i][j]);
            mask |= (1 << j);
            i = j;
        }
        //cout<<ret<<endl;
        return ans;
    }
};
