Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"

Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.size();
        if(n == 0) return 0;
        int dp[n];
        //dp[i] longest valid parenth. ending at index i. 
        memset(dp, 0, sizeof(dp));
        for(int i = 0; i < n; i++){
            if(s[i] == '('){
                dp[i] = 0;
            }
            else if(s[i] == ')'){
                if(i >= 1 && s[i - 1] == '('){
                    dp[i] = 2;
                    if(i >= 2){
                        dp[i] += dp[i - 2];
                    }
                }
                else if(i >= 1 && s[i - 1] == ')'){
                    if(i >= dp[i - 1] + 1  && s[i - dp[i - 1] - 1] == '('){
                        dp[i] = 2 + dp[i - 1];
                        if(i >= dp[i - 1] + 2)
                        dp[i] += dp[i - dp[i - 1] - 2];
                    }
                }
            }
        }
        /*for(int i = 0; i < n; i++){
            cout << dp[i] <<" ";
        }*/
        return *max_element(dp, dp + n);
    }
};
