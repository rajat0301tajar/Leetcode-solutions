Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    string lcs(string s1,string s2){
        int n = s1.size(); int m = s2.size();
        vector<vector<string>>dp(n+1 , vector<string>(m+1,""));
        for(int i =0 ; i < n; i++){
            for(int j = 0 ; j < m; j++){
                if(s1[i] == s2[j]){
                    dp[i+1][j+1] = dp[i][j] + s1[i];
                }
                else{
                    dp[i+1][j+1] = dp[i+1][j].size() > dp[i][j+1].size() ? dp[i+1][j] : dp[i][j+1]; 
                }
            }
        }
        return dp[n][m];
    }
    string shortestCommonSupersequence(string str1, string str2) {
        int i =0 ; int j =0 ;
        int n = str1.size() ; int m = str2.size();
        string longestcommon = lcs(str1,str2);
        string ans = "";
        for(auto c : longestcommon){
            while(str1[i] != c){
                ans += str1[i++];
            }
            while(str2[j] != c){
                ans += str2[j++];
            }
            ans += c; i++,j++;
        }
        string res = ans + str1.substr(i) + str2.substr(j);
        return res;
    }
};
