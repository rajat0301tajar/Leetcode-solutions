There is a box protected by a password. The password is a sequence of n digits where each digit can be one of the first k digits 0, 1, ..., k-1.

While entering a password, the last n digits entered will automatically be matched against the correct password.

For example, assuming the correct password is "345", if you type "012345", the box will open because the correct password matches the suffix of the entered password.

Return any password of minimum length that is guaranteed to open the box at some point of entering it.

 

Example 1:

Input: n = 1, k = 2
Output: "01"
Note: "10" will be accepted too.

Example 2:

Input: n = 2, k = 2
Output: "00110"
Note: "01100", "10011", "11001" will be accepted too.

 

Note:

    n will be in the range [1, 4].
    k will be in the range [1, 10].
    k^n will be at most 4096.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In general, during our Hierholzer walk, we will record the results of other subcycles first, before recording the main cycle we started from, just as in our first description of the algorithm. Technically, we are recording backwards, as we exit the nodes.

For example, we will walk (in the "original cycle") until we get stuck, then record the node as we exit. (Every edge walked is always marked immediately so that it can no longer be used.) Then in the penultimate node of our original cycle, we will do a Hierholzer walk and then record this node; then in the third-last node of our original cycle we will do a Hierholzer walk and then record this node, and so on.

class Solution {
public:
    set<string>seen;
    string ans;
    void dfs(string node, int k){
        for(int x = 0; x < k; x++){
            string nei = node + string(1,'0' + x); 
            if(seen.count(nei) == 0){
                seen.insert(nei);
                dfs(nei.substr(1), k);
                ans += string(1,'0' + x);
            }
        }
    }
    string crackSafe(int n, int k) {
        if(n == 1 && k == 1)
            return "0";
        ans = "";
        string start = "";
        for(int i = 0; i < n - 1; i++){
            start += "0";
        }
        dfs(start, k);
        ans += start;
        return ans;
    }
};
