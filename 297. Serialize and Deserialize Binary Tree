Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"

Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(root == NULL) return "#";
        string ret = to_string(root->val) + "," + serialize(root->left) + "," + serialize(root->right);
        return ret;
    }
    int to_int(string x){
        stringstream ss(x);
        int n;
        ss >> n;
        return n;
    }
    TreeNode *preorder(vector<string>&pre, int &idx, int n){
        if(pre[idx] == "#") {
            idx++;
            return NULL;
        }
        TreeNode *root = new TreeNode(to_int(pre[idx++]));
        root->left = preorder(pre, idx, n);
        root->right = preorder(pre, idx, n);
        return root;
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        string code = ""; int n = data.size();
        for(int i = 0; i < n; i++){
            if(data[i] != ','){
                code += data[i];
            }
            else
                code += " ";
        }
        stringstream ss(code);
        string x;
        vector<string>pre;
        while(ss >> x){
            pre.push_back(x); //cout<<x<<" ";
        }
        int idx = 0; int sz = pre.size();
        return preorder(pre, idx, sz);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));
