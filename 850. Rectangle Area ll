We are given a list of (axis-aligned) rectangles.  Each rectangle[i] = [x1, y1, x2, y2] , where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the ith rectangle.

Find the total area covered by all rectangles in the plane.  Since the answer may be too large, return it modulo 10^9 + 7.
Example 1:

Input: [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: As illustrated in the picture.

Example 2:

Input: [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 10^18 modulo (10^9 + 7), which is (10^9)^2 = (-7)^2 = 49.
------------------------------------------------------------------------------------------------------------------------------------------------------------
// Coordinate Compression Technique.

typedef long long int64 ;
#define MOD 1000000007
class Solution {
public:
        
    int rectangleArea(vector<vector<int>>& a) {
        vector<int>X,Y;
        int n  = a.size();
        for(int i =0 ; i < n ;i++){
            X.push_back(a[i][0]);
            X.push_back(a[i][2]);
            Y.push_back(a[i][1]);
            Y.push_back(a[i][3]);
        }
        sort(X.begin(),X.end());
        X.erase(unique(X.begin(),X.end()),X.end());
        sort(Y.begin(),Y.end());
        Y.erase(unique(Y.begin(),Y.end()),Y.end());
        vector<vector<bool>>visit(X.size(),vector<bool>(Y.size()));
        for(int i = 0; i < X.size(); i++){
            cout<<X[i]<<" ";
        }
        cout<<endl;
        for(int i = 0; i < Y.size(); i++){
            cout<<Y[i]<<" ";
        }
        cout<<endl;
        for(int i = 0 ; i < n ; i++){
            int x1 = lower_bound(X.begin(),X.end(),a[i][0]) - X.begin();
            int x2 = lower_bound(X.begin(),X.end(),a[i][2]) - X.begin();
            int y1 = lower_bound(Y.begin(),Y.end(),a[i][1]) - Y.begin();
            int y2 = lower_bound(Y.begin(),Y.end(),a[i][3]) - Y.begin();
            cout<<x1<<" "<<y1<<", "<<x2<<" "<<y2<<endl;
            for(int u = x1 ; u < x2 ; u++){
                for(int v = y1 ; v < y2 ; v++){
                    visit[u][v] = true;
                    cout<<"("<<u<<", "<<v<<")"<<" ";
                }
            }
            cout<<endl;
        }
        
        int ans =0 ;
        for(int i = 0 ;i < X.size(); i++){
            for(int j =0 ;j < Y.size(); j++){
                if(visit[i][j]){
                    ans = (ans + (int64)(X[i+1]-X[i]) * (Y[j+1]-Y[j]))%MOD;
                }
            }
        }
        return ans;
    }
};
