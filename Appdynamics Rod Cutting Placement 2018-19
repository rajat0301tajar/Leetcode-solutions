void backtrack(vector<int> &ret, vector<vector<int>> &dp, int i, int j, vector<int> A) {
    if (i + 1 == j) return ;
    for (int k = i + 1; k < j; k++) {
        if (dp[i][k] + dp[k][j] + A[j] - A[i] == dp[i][j]) {
            ret.push_back(A[k]);
            backtrack(ret, dp, i, k, A);
            backtrack(ret, dp, k, j, A);
            return ;
        }
    }
    return ;
}
vector<int> Solution::rodCut(int L, vector<int> &p) {
    vector<int> A;
    A.push_back(0);
    for (auto x : p) A.push_back(x);
    A.push_back(L);
    sort(A.begin(), A.end());

    int n = A.size();
    vector<vector<int>> dp(n, vector<int>(n, 0));
    for (int l = 2; l <= n; l++) {
        for (int i = 0; i + l - 1 < n; i++) {
            int j = i + l - 1;
            dp[i][j] = INT_MAX;
            for (int k = i + 1; k < j; k++)
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[j] - A[i]);
        }
                
    }
    
    vector<int> ret;
    backtrack(ret, dp, 0, n - 1, A);
    return ret;
    
}
