In a given grid, each cell can have one of three values:

    the value 0 representing an empty cell;
    the value 1 representing a fresh orange;
    the value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.
Example 1:
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.

 

Note:

    1 <= grid.length <= 10
    1 <= grid[0].length <= 10
    grid[i][j] is only 0, 1, or 2.

--------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    struct Node{
      int x;
        int y;
        int level;
    };
    int orangesRotting(vector<vector<int>>& grid) {
        // do bfs move level by level from a rotten orange
        // also we will need to keep track of visited indexes.
        // lastly check if we still have some fresh oranges left.
        // make a queue of {x,y,level}
           // each level from (x,y) constituted by (x+1,y) (x,y+1)(x,y-1)(x-1,y) {visited}
        int sx=-1,sy=-1;
        queue<struct Node>Q;     //push into Q rotten oranges only.
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                  sx=i;
                  sy=j;
                    Q.push({sx,sy,0});
                }
            }
        }
        int flag=0;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                   flag=1;
                    break;
                }
            }
            if(flag==1)
                    break;
            
        }
        if(sx==-1 && flag==1)
            return -1;
        else if(sx==-1 && flag==0)
            return 0;
        int dx[4]={-1,0,1,0};
        int dy[4]={0,1,0,-1};
        
        int ans=0;
        while(!Q.empty()){
            struct Node temp=Q.front();
            Q.pop();
            int tx=temp.x;
            int ty=temp.y;
            int tl=temp.level;
            ans=max(ans,tl);
            //cout<<ans<<endl;
            grid[tx][ty]=3;   // marked as visited
            for(int i=0;i<4;i++){  // for inserting all rotten or which turn rotten 
                int x=tx+dx[i];
                int y=ty+dy[i];
                if(x<grid.size() && y<grid[0].size() && x>=0 && y>=0){
                    if(grid[x][y]==1){ // if turns rotten
                        grid[x][y]=2;
                        Q.push({x,y,tl+1});
                    }
                }
            }
        }
        /*for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                cout<<grid[i][j]<< " "; 
            }
            cout<<endl;
        }*/
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return ans;
    }
};
