Given a m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

    1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
    2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
    3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
    4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])

Notice that there could be some invalid signs on the cells of the grid which points outside the grid.

You will initially start at the upper left cell (0,0). A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path doesn't have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

 

Example 1:
Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int dp[100][100][4];
const int inf = 1 << 29;
class Solution {
public:
    int minCost(vector<vector<int>>& A) {
        int n = A.size();
        int m = A[0].size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                A[i][j] -= 1;
                for(int k = 0; k < 4; k++){
                    dp[i][j][k] = inf;
                }
            }
        }
        
        int dirs[4][2] = {{0, 1},{0, -1},{1, 0},{-1, 0}};
        queue<vector<int>> Q;
        Q.push({0, 0, A[0][0]});
        dp[0][0][A[0][0]] = 0;
        while(!Q.empty()){
            auto tp = Q.front();
            Q.pop();
            int x = tp[0], y = tp[1], k = tp[2];
            for(int nk = 0; nk < 4; nk++){
                if(nk == k) continue;
                if(dp[x][y][nk] > 1 + dp[x][y][k]){
                    dp[x][y][nk] = 1 + dp[x][y][k];
                    Q.push({x, y, nk});
                }
            }
            int nx = x + dirs[k][0];
            int ny = y + dirs[k][1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
            int nk = A[nx][ny];
            if(dp[nx][ny][nk] > dp[x][y][k]){
               dp[nx][ny][nk] = dp[x][y][k];
               Q.push({nx, ny, nk});
            }
        }
        int ans = inf;
        for(int i = 0; i < 4; i++){
            ans = min(ans, dp[n - 1][m - 1][i]);
        }
        return ans;
    }
};
