Strings A and B are K-similar (for some non-negative integer K) if we can swap the positions of two letters in A exactly K times so that the resulting string equals B.

Given two anagrams A and B, return the smallest K for which A and B are K-similar.

Example 1:

Input: A = "ab", B = "ba"
Output: 1

Example 2:

Input: A = "abc", B = "bca"
Output: 2

Example 3:

Input: A = "abac", B = "baca"
Output: 2

Example 4:

Input: A = "aabc", B = "abca"
Output: 2

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int kSimilarity(string A, string B) {
        if(A== B)
            return 0;
        set<string>visited;
        queue<string>q;
        q.push(A);
        int ans = 0 ;
        while(!q.empty()){
            int size = q.size();
            ans++;
            while(size--){
                string s = q.front();
                q.pop();
                int i=0 ;
                while(s[i] == B[i]){
                    i++;
                }
                for(int j= i+1 ; j < A.size() ;j++){
                    if(s[j] == B[j] || s[j] != B[i])
                        continue;
                        string temp = s;
                        swap(temp[i], temp[j]);
                        if(temp == B){
                            return ans;
                        }
                        if(visited.count(temp) ==0){
                            visited.insert(temp);
                            q.push(temp);
                        }
                }
            }
        }
        return ans;
    }
};
