We are given the root node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.

Just as in the previous problem, the given tree was constructed from an list A (root = Construct(A)) recursively with the following Construct(A) routine:

    If A is empty, return null.
    Otherwise, let A[i] be the largest element of A.  Create a root node with value A[i].
    The left child of root will be Construct([A[0], A[1], ..., A[i-1]])
    The right child of root will be Construct([A[i+1], A[i+2], ..., A[A.length - 1]])
    Return root.

Note that we were not given A directly, only a root node root = Construct(A).

Suppose B is a copy of A with the value val appended to it.  It is guaranteed that B has unique values.

Return Construct(B).

 

Example 1:
Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: A = [1,4,2,3], B = [1,4,2,3,5]

Example 2:
Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: A = [2,1,5,4], B = [2,1,5,4,3]

Example 3:
Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: A = [2,1,5,3], B = [2,1,5,3,4]

 

Note:

    1 <= B.length <= 100
---------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoMaxTree(TreeNode* root, int val) {
        // boundary condition.
        if(root==NULL){
           struct TreeNode *temp=new struct TreeNode(val);
            return temp;
        }
        // scenarios:
          // val > root->val : in this case val becomes new root and old tree becomes left subtree of this new root.
        if(val> root->val){
            struct TreeNode *newRoot=new struct TreeNode(val);
            newRoot->left=root;
            return newRoot;
        }
          // else if val < root->val
        else{
            // recursively insert in this case into right subtree of the root.
            root->right=insertIntoMaxTree(root->right,val);
        }
        return root;      
    }
};
