Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 10^9 + 7.

 

Example 1:

Input: arr = [1,2], k = 3
Output: 9

Example 2:

Input: arr = [1,-2,1], k = 5
Output: 2

Example 3:

Input: arr = [-1,-2], k = 7
Output: 0

 

Constraints:

    1 <= arr.length <= 10^5
    1 <= k <= 10^5
    -10^4 <= arr[i] <= 10^4
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    const int MOD = 1e9 + 7;
    typedef long long int64;
    int kConcatenationMaxSum(vector<int>& A, int k) {
        int64 ret = 0;
        int64 sum = accumulate(A.begin(), A.end(), 0);
        int64 cur = 0;
        for(auto x : A){
            cur += x;
            if(cur < 0) cur = 0;
            ret = max(ret, cur);
        }
        int64 n = A.size();
        if(k >= 2){
            int64 L[n], R[n];
            L[0] = A[0]; R[n - 1] = A[n - 1];
            for(int64 i = 1; i < n; i++){
                L[i] = L[i - 1] + A[i];
            }
            for(int64 i = n - 2; i >= 0; i--){
                R[i] = R[i + 1] + A[i];
            }
            int64 cur = 0;
            cur += max(0LL, *max_element(R, R + n)); ret %= MOD;
            cur += max(0LL, *max_element(L, L + n)); ret %= MOD;
            cur += max(0LL, sum * (k - 2)); ret %= MOD;
            ret = max(ret, cur);
        }
        return ret % MOD;
    }
};
