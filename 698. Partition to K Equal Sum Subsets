Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
---------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    bool helper(bool visit[],int start,int k,int n,vector<int>&nums,int path[],int idx,int sum_k){
        if(idx == k){
            return true;
        }
        for(int i = start; i < n; i++){
            if(!visit[i]){
                if(path[idx] + nums[i] > sum_k){
                    continue;
                }
                path[idx] += nums[i];
                
                visit[i] = true;
                bool a = false; bool b = false;
                if(path[idx] == sum_k){
                     a = helper(visit,0,k,n,nums,path,idx + 1,sum_k);
                     if(a) return true;
                }
                else{
                     b = helper(visit,i + 1,k,n,nums,path,idx,sum_k);
                     if(b) return true;
                }
                path[idx] -= nums[i];
                visit[i] = false;
            }
        }
        return false;
    }
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int idx = 0;
        int sum = accumulate(nums.begin(),nums.end(),0);
        if(sum % k != 0){
            return false;
        }
        int sum_k = sum / k;
        int n = nums.size();
        int path[k];
        memset(path,0,sizeof(path));
        bool visit[n];
        memset(visit,false,sizeof(visit));
        return helper(visit,0,k,n,nums,path,idx,sum_k);
    }
};
