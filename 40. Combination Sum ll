Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> A;
    vector<vector<int>>ret;
    void helper(int sum, int i, int path[100000], int idx, int n){
        if(sum < 0) return;
        if(i > n) return;
        if(sum == 0){
            vector<int> temp(path, path + idx);
            ret.push_back(temp);
            return;
        }
        // need to decide what to place at path[idx] so if already seen before element then skip.
        for(int p = i; p < n; p++){
            if(p > i && A[p] == A[p - 1]) continue;
            path[idx] = A[p];
            // passing p + 1 (for no repetition...)
            helper(sum - path[idx], p + 1, path, idx + 1, n);
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        A = candidates;
        sort(A.begin(), A.end());    // --> important.
        int path[100000]; int n = A.size();
        helper(target, 0, path, 0, n);
        return ret;
    }
};
