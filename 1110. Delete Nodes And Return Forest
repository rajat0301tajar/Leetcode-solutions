Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest.  You may return the result in any order.

 

Example 1:
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

 

Constraints:

    The number of nodes in the given tree is at most 1000.
    Each node has a distinct value between 1 and 1000.
    to_delete.length <= 1000
    to_delete contains distinct values between 1 and 1000.
------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    set<int>st;
    void helper(TreeNode *root,vector<TreeNode *>&v,TreeNode * prev,int dir){
        if(!root){
            return;
        }
        helper(root->left,v,root,0);
        helper(root->right,v,root,1);
        
        if(st.count(root->val)){
            if(root->left){
                v.push_back(root->left);
            }
            if(root->right){
                v.push_back(root->right);
            }
            if(prev){
                if(dir == 0)
                    prev->left=NULL;
                else
                    prev->right= NULL;
                
            }
        }
        
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        for(auto x : to_delete){
            st.insert(x);
        }
        vector<TreeNode *>v;
        TreeNode *prev = NULL;
        helper(root,v,prev,0);
        if(st.count(root->val)== 0){
            v.push_back(root);
        }
        return v;
    }
};
