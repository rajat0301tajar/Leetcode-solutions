Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

Find the minimum element.

The array may contain duplicates.

Example 1:

Input: [1,3,5]
Output: 1

Example 2:

Input: [2,2,2,0,1]
Output: 0
---------------------------------------------------------------------------------------------------------------------------
APPROACH --> possible search space defined by ---> [l,r]

class Solution {
public:
    int findMin(vector<int>& A) {
       // A.erase(unique(A.begin(),A.end()),A.end());
        int l = 0; int r = A.size() - 1;
        while(l < r){
            int mid = (l + r) / 2;
            if(A[mid] > A[r]){
                l = mid + 1;
            }
            else if(A[mid] < A[l]){
                r = mid; 
                l++;
            }
            else{
                r--; 
            }
        }
        return A[r];
    }
};
// nums[lo] <= nums[mi] <= nums[hi], min is nums[lo]
// nums[lo] > nums[mi] <= nums[hi], (lo, mi] is not sorted, min is inside
// nums[lo] <= nums[mi] > nums[hi], (mi, hi] is not sorted, min is inside
// nums[lo] > nums[mi] > nums[hi], impossible
