Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6

Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int ret;
    int maxPathDown(TreeNode *root){
        if(root == NULL) return 0;
        int l = max(0, maxPathDown(root->left)); // clips negative path to the left.
        int r = max(0, maxPathDown(root->right)); // clips negative path to the root.
        ret = max(ret, l + r + root->val);// all of the three terms are >= 0.
        return root->val + max(l, r); // we return max Path down (>= 0) ,including root for continuity.
    }
    int maxPathSum(TreeNode* root) {
        this->ret = INT_MIN;
         maxPathDown(root);
        return ret;
    }
};
