You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.

-----------------------------------------------------------------------------------------------------------------------

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;

    Node() {}

    Node(int _val, Node* _prev, Node* _next, Node* _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
public:
    Node* flatten(Node* head) {
        if(!head){
            return NULL;
        }
        Node *head1 = flatten(head->child);
        Node *tail = head1;
        while(tail && tail->next){
            tail = tail->next;
        }
        Node *head2 = flatten(head->next);
        if(!head1 && head2){
            head->next = head2;
            head2->prev = head;
        }
        else if(head1 && !head2){
            head->next = head1;
            head1->prev = head;
        }
        else if(head1 && head2){
            if(head1){
                head->next = head1;
                head1->prev = head;
            }
            if(head2){
                tail->next = head2;
                head2->prev = tail;
            }
        }
        else{
            head->next = NULL;
        }
        head->child = NULL;
        return head;
    }
};
