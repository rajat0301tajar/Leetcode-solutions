Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:

Input: "cbbd"
Output: "bb"
----------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        if(n == 0) return "";
        bool dp[n][n];
        memset(dp, false, sizeof(dp));
        for(int i = 0; i < n; i++){
            dp[i][i] = 1;
        }
        string ret = string(1, s[0]); int mx = 1;
        for(int i = 0; i < n - 1; i++){
            if(s[i] == s[i + 1]){
                dp[i][i + 1] = 1;
                ret = s.substr(i, 2);
                mx = 2;
            }
        }
         
        for(int l = 3; l <= n; l++){
            for(int i = 0; i < n - l + 1; i++){
                int j = i + l - 1;
                if(s[i] == s[j] && dp[i + 1][j - 1]){
                    dp[i][j] = 1;
                    if(l > mx){
                        ret = s.substr(i, l);
                    }
                }
            }
        }
        // for(int i = 0; i < n; i++){
        //     for(int j = 0; j < n; j++){
        //         cout << dp[i][j] << " ";
        //     }
        //     cout << endl;
        // }
        return ret;
    }
};
