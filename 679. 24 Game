 You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.

Example 1:

Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24

Example 2:

Input: [1, 2, 1, 2]
Output: False
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    double epsilon = pow(10.0, -5);
    vector<char>operations = {'+', '-', '*', '/'};
    bool find24(vector<double>A){
        if(A.size() == 1){
            return abs(A[0] - 24.0) <= epsilon;
        }
        int n = A.size();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(i == j) continue;
                vector<double> ret;
                for(int k = 0; k < n; k++){
                    if(k == i || k == j) continue;
                    ret.push_back(A[k]);
                }
                for(auto op : operations){
                    if((op == '+' || op == '*') && i > j) continue;// no need to recal.
                    if(op == '/' && A[j] == 0.0) continue;
                    switch(op){
                        case '+' : ret.push_back(A[i] + A[j]); break;
                        case '-' : ret.push_back(A[i] - A[j]); break;
                        case '*' : ret.push_back(A[i] * A[j]); break;
                        case '/' : ret.push_back(A[i] / A[j]); break;  
                    }
                    if(find24(ret)) return true;
                    ret.pop_back(); // backtrack and try other options.
                }
            }
        }
        return false;
    }
    bool judgePoint24(vector<int>& nums) {
        vector<double>v;
        for(auto x : nums){
            v.push_back((double)(x));
        }
        return find24(v);
    }
};
