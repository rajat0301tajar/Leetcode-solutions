In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.
Return the minimum number of steps needed to move the knight to the square [x, y].  It is guaranteed the answer exists.

 

Example 1:

Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:

Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

 

Constraints:

    |x| + |y| <= 300

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef pair<int,int> pii;
    int dirs[8][2] = {{-2,-1},{-1,-2},{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1}};
    int minKnightMoves(int X, int Y) {
        queue<pii>q;
        X = abs(X); Y = abs(Y);           // great pruning step because of symmetry.
        if(X == 0 && Y == 0) return 0;
        unordered_map<int,unordered_map<int,int>>dist;
        q.push({0,0}); dist[0][0] = 0;
        unordered_map<int,unordered_map<int,bool>>visit;
        visit[0][0] = true;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                pii temp = q.front();
                q.pop(); int x = temp.first; int y = temp.second; int d = dist[x][y];
                if(x == X && y == Y) return d;
                for(int i = 0; i < 8; i++){
                    int nx = x + dirs[i][0];
                    int ny = y + dirs[i][1];
                    if(nx < 0 || ny < 0 || visit[nx][ny] == true || (nx + ny > 300))//(abs(nx) + abs(ny) > 300))
                        continue;
                    //if(nx * x < 0 || ny * y < 0) continue;
                    q.push({nx,ny});
                    dist[nx][ny] = d + 1;
                    visit[nx][ny] = true;
                }
            }
        }
        return -1;
    }
};
