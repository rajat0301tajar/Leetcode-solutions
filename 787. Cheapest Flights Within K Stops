There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.

Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**Really great implementation using bfs + dijkstra mixture**
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>>pq;
        pq.push({0, src, K + 1});//price, node, stops allowed to get to destination.
        map<int,map<int,int>>mp;
        for(auto x : flights){
            mp[x[0]][x[1]] = x[2];
        }
        while(!pq.empty()){
            vector<int>temp = pq.top();
            pq.pop();
            int price = temp[0]; 
            int node = temp[1];
            int stops = temp[2];
            if(node == dst){
                return price;
            }
            // try this option only if we have more reserved stops we can afford.
            if(stops > 0){
                for(auto x : mp[temp[1]]){
                    pq.push({price + x.second, x.first, stops - 1});
                }
            }
        }
        return -1;
    }
};
