An N x N board contains only 0s and 1s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.

What is the minimum number of moves to transform the board into a "chessboard" - a board where no 0s and no 1s are 4-directionally adjacent? If the task is impossible, return -1.

Examples:
Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
Explanation:
One potential sequence of moves is shown below, from left to right:

0110     1010     1010
0110 --> 1010 --> 0101
1001     0101     1010
1001     0101     0101

The first move swaps the first and second column.
The second move swaps the second and third row.


Input: board = [[0, 1], [1, 0]]
Output: 0
Explanation:
Also note that the board with 0 in the top left corner,
01
10

is also a valid chessboard.

Input: board = [[1, 0], [1, 0]]
Output: -1
Explanation:
No matter what sequence of moves you make, you cannot end with a valid chessboard.

Note:

    board will have the same number of rows and columns, a number in the range [2, 30].
    board[i][j] will be only 0s or 1s.
--------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int movesToChessboard(vector<vector<int>>& b) {
        int n = b.size(), rowSum = 0, colSum = 0, rowSwap = 0, colSwap = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if((b[0][0] ^ b[i][0]) ^ (b[0][j] ^ b[i][j])) 
                    return -1;
            }
        }
        // fixing 1st row and 1st column fixes entire board automatically.
        for(int i = 0; i < n; i++){
            rowSum += b[i][0] ? 1 : -1;
            colSum += b[0][i] ? 1 : -1;
            // assuming that we want to bring all 1s to even position, 0s to odd position 
            // rowSwap, colSwap -->tell no of rows , cols to be corrected by swapping.
            rowSwap += b[i][0] == i % 2;
            colSwap += b[0][i] == i % 2;
        }
        if(abs(rowSum) > 1 || abs(colSum) > 1) return -1;
        if(n & 1){
            if(colSwap % 2) colSwap = n - colSwap;
            if(rowSwap % 2) rowSwap = n - rowSwap;
        }
        else{
            colSwap = min(n - colSwap, colSwap);
            rowSwap = min(n - rowSwap, rowSwap);
        }
        // no of swaps needed is half of the number to be corrected.
        // each swap corrects 2 rows or 2 cols.
        return (colSwap + rowSwap) / 2;
    }
};
