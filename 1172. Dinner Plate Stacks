You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.

Implement the DinnerPlates class:

    DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks.
    void push(int val) pushes the given positive integer val into the leftmost stack with size less than capacity.
    int pop() returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all stacks are empty.
    int popAtStack(int index) returns the value at the top of the stack with the given index and removes it from that stack, and returns -1 if the stack with that given index is empty.

Example:

Input: 
["DinnerPlates","push","push","push","push","push","popAtStack","push","push","popAtStack","popAtStack","pop","pop","pop","pop","pop"]
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
Output: 
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]

Explanation: 
DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // The stacks are now:  2  4
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 2.  The stacks are now:     4
                                                       1  3  5
                                                       ﹈ ﹈ ﹈
D.push(20);        // The stacks are now: 20  4
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.push(21);        // The stacks are now: 20  4 21
                                           1  3  5
                                           ﹈ ﹈ ﹈
D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
                                                        1  3  5
                                                        ﹈ ﹈ ﹈
D.popAtStack(2);   // Returns 21.  The stacks are now:     4
                                                        1  3  5
                                                        ﹈ ﹈ ﹈ 
D.pop()            // Returns 5.  The stacks are now:      4
                                                        1  3 
                                                        ﹈ ﹈  
D.pop()            // Returns 4.  The stacks are now:   1  3 
                                                        ﹈ ﹈   
D.pop()            // Returns 3.  The stacks are now:   1 
                                                        ﹈   
D.pop()            // Returns 1.  There are no stacks.
D.pop()            // Returns -1.  There are still no stacks.

------------------------------------------------------------------------------------------------------------------------------------------------------------

class DinnerPlates {
    int cap;
    set<int> s; // stores idx of stacks in which insertion is possible.
    set<int> full; // stores idx of stacks from which deletion is possible.
    
    vector<stack<int> > stk; // list of stacks to see content in each stack.

public:
    DinnerPlates(int capacity) {
        this->cap = capacity;
    }
    
    void push(int val) {
        if(s.empty()){
            s.insert(stk.size());
            stk.push_back(stack<int>());
        }
        int x = *(s.begin());  // push into leftmost not full stack 
        stk[x].push(val);
        full.insert(x);       // hence now we can delete from this stack.
        if(stk[x].size()>=cap){   // if size >= cap then we cant push any further.
            s.erase(s.begin());
        }
    }
    
    int pop() {
        if(full.empty()){
            return -1;
        }
        auto it = full.end(); // pop from the rightmost stack if not empty.
        it--;
        int x = *it;
        int ans = stk[x].top();
        stk[x].pop();
        s.insert(x);     // hence now we can insert in this stack too.
        if(stk[x].size()==0){   // if size of stack becomes 0 then we cant pop any further.
            full.erase(x);
        }
        return ans;
    }
    
    int popAtStack(int index) {
        if(stk[index].empty()){
            return -1;
        }
        int x = index;
        int ans = stk[x].top();
        stk[x].pop();
        s.insert(x);        // hence we can insert in this stack.
        if(stk[x].size()==0){
            full.erase(x);
        }
        return ans;
    }
};

/**
 * Your DinnerPlates object will be instantiated and called as such:
 * DinnerPlates* obj = new DinnerPlates(capacity);
 * obj->push(val);
 * int param_2 = obj->pop();
 * int param_3 = obj->popAtStack(index);
 */
