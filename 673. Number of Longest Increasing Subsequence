 Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:

Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].
------------------------------------------------------------------------------------------------------

class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int,int>>dp(n,{1,1});
        int mx = 0;
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]){
                    if(dp[i].first == dp[j].first + 1) dp[i].second += dp[j].second;
                    if(dp[i].first < dp[j].first + 1) dp[i] = {dp[j].first + 1, dp[j].second};
                }
            }
        }
        
        for(int i = 0; i < n; i++){
            mx = max(mx , dp[i].first);
        }
        int ans = 0;
        for(int i = 0; i < n; i++){
            if(dp[i].first == mx){
                ans += dp[i].second;
            }
        }
        return ans;
    }
};
