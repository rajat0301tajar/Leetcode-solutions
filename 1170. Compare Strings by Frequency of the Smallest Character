Let's define a function f(s) over a non-empty string s, which calculates the frequency of the smallest character in s. For example, if s = "dcce" then f(s) = 2 because the smallest character is "c" and its frequency is 2.

Now, given string arrays queries and words, return an integer array answer, where each answer[i] is the number of words such that f(queries[i]) < f(W), where W is a word in words.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").

Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> numSmallerByFrequency(vector<string>& queries, vector<string>& words) {
        unordered_map<string,unordered_map<char,int>>mp;
        unordered_map<string, char>small;
        for(auto &x : queries){
            sort(x.begin(),x.end());
        }
        for(auto &x : words){
            sort(x.begin(),x.end());
        }
        vector<int>fq, fw;
        for(auto x : words){
            char c = x[0]; 
            small[x] = c;
            fw.push_back(upper_bound(x.begin(),x.end(),c) - x.begin());
        }
        for(auto x : queries){
            char c = x[0];
            small[x] = c;
            fq.push_back(upper_bound(x.begin(),x.end(),c) - x.begin());
        }
        sort(fw.begin(),fw.end());
        int n = queries.size();
        vector<int>ret;
        for(auto x : fq){
           ret.push_back(fw.end() - upper_bound(fw.begin(),fw.end(),x)) ;
        }
        return ret;
    }
};
