Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// different approach from usual 
// instead of thinking of whether to include or exclude A[i] at path[idx].
// here we think what to place at path[idx].
class Solution {
public:
    vector<vector<int>>ret;
    vector<int> A;
    void helper(int sum, int i, int path[100000], int idx, int n){
        if(sum < 0) return;
        if(i > n) return;
        if(sum == 0){
            vector<int>temp (path, path + idx);
            ret.push_back(temp);
            return;
        }
        for(int p = i; p < n; p++){
            path[idx] = A[p];
            helper(sum - path[idx], p, path, idx + 1, n);
            // different approach (not needed --> helper(sum, p + 1, path, idx, n));
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        A = candidates;
        int path[100000];
        helper(target, 0, path, 0, A.size());
        return ret;
    }
};
