Given two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.

We define an inverse pair as following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.

Example 1:

Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.
-----------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    #define mod 1000000007
    /*int kInversePairs(int n, int k) {
        vector<vector<int>>dp(n + 1, vector<int>(k + 1));
        dp[0][0] = 1; // no of permutation of numbers till i such that we have j inverse pairs.
        for(int i = 1; i <= n; i++){
            for(int j = 0; j < i; j++){ // using i we can have at max i - 1 inverse.
                for(int m = 0; m <= k; m++){ // dp[i][m] += dp[i - 1][m - j];
                    if(m - j >= 0){
                        dp[i][m] = (dp[i][m] + dp[i - 1][m - j]) % mod;
                    }
                }
            }
        }
        return dp[n][k];
    }*/
    /*int kInversePairs(int n, int k){
        vector<vector<int>> dp(n + 1, vector<int> (k + 1));
        dp[0][0] = 1;
        for(int i = 1; i <= n; i++){
            dp[i][0] = 1;
            for(int j = 1; j <= k; j++){
                dp[i][j] = (dp[i][j - 1] + dp[i - 1][j]) % mod;
                if(j - i >= 0){
                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod;
                }
            }
        }
        return dp[n][k];
    }*/
    int kInversePairs(int n,int k){
        vector<int>dp(k + 1);
        dp[0] = 1;
        for(int i = 1; i <= n; i++){
            vector<int>temp(k + 1);
            temp[0] = 1;
            for(int j = 1; j <= k; j++){
                temp[j] = (temp[j - 1] + dp[j])  % mod;
                if(j - i >= 0){
                    temp[j] = (temp[j] - dp[j - i] + mod) % mod;
                }
            }
            dp = temp;
        }
        return dp[k];
    }
};
