

You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.

 

Example 1:

Input: s = "dcab", pairs = [[0,3],[1,2]]
Output: "bacd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[1] and s[2], s = "bacd"

Example 2:

Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
Output: "abcd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[0] and s[2], s = "acbd"
Swap s[1] and s[2], s = "abcd"

Example 3:

Input: s = "cba", pairs = [[0,1],[1,2]]
Output: "abc"
Explaination: 
Swap s[0] and s[1], s = "bca"
Swap s[1] and s[2], s = "bac"
Swap s[0] and s[1], s = "abc"

 

Constraints:

    1 <= s.length <= 10^5
    0 <= pairs.length <= 10^5
    0 <= pairs[i][0], pairs[i][1] < s.length
    s only contains lower case English letters.
---------------------------------------------------------------------------------------------------------
class Solution {
public:
    void dfs(map<int,vector<int>>&g,string &s, string &temp, vector<int>&idx, int u, bool visited[100001]){
        if(visited[u]) return;
        idx.push_back(u);
        temp += s[u];
        visited[u] = true;
        for(auto x : g[u]){
            dfs(g, s, temp, idx, x, visited);
        }
        return;
    }
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        map<int, vector<int>>g;
        for(auto x : pairs){
            g[x[0]].push_back(x[1]);
            g[x[1]].push_back(x[0]);
        }
        int n = s.size();
        bool visited[100001]; 
        memset(visited, false,sizeof(visited));
        map<int, char>mp;
        for(int i = 0; i < n; i++){
            if(!visited[i]){
                string temp = ""; vector<int>idx;
                dfs(g, s, temp, idx, i, visited);
                sort(temp.begin(), temp.end()); sort(idx.begin(), idx.end());
                for(int i = 0; i < temp.size(); i++){
                    mp[idx[i]] = temp[i];
                }
            }
        }
        string ret = "";
        for(int i = 0; i < n; i++){
            ret += mp[i];
        }
        return ret;
    }
};
