#include <bits/stdc++.h>
using namespace std;
typedef long long int64;
map<int,vector<int>>g;
bool visited[10000];
int ret;
void bfs(int u){
    queue<int>q;
    q.push(u);
    int level = 0;
    while(!q.empty()){
        int sz = q.size();
        while(sz--){
            int temp = q.front();
            cout<<temp<<" ";
            q.pop();
            for(auto x : g[temp]){
                if(visited[x]) continue;
                visited[x] = true;
                q.push(x);
            }
        }
        cout<<endl;
        level++;
    }
    ret = max(ret, level);
    cout<<"LEVEL = "<<level<<endl;
}
int main(){
   vector<int>A = {-1,8,6,0,7,3,8,9,-1,6,1};
   int n = A.size();
   ret = 0;
   vector<int>v;
   for(int i = 0; i < n; i++){
      if(A[i] != -1)
      g[A[i]].push_back(i);
      else
        v.push_back(i);
   }

   memset(visited, false,sizeof(visited));
   for(auto x : v){
        bfs(x);
   }
   cout<<"ans = "<<ret<<endl;
   return 0;
}
