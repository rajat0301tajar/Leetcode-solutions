Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
----------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int>A;
    vector<vector<int>>ret;
    void dfs(int u, int mask, int path[], int idx, int n){
        if(mask == (1 << n) - 1){
            vector<int>v(path, path + idx);
            ret.push_back(v);
            return;
        }
        for(int i = 0; i < n; i++){
            if((mask >> i) & 1 == 1) continue;
            path[idx] = A[i];
            dfs(i, (mask | (1 << i)), path, idx + 1, n);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        this->A = nums;
        int n = A.size(); int path[100000];
        dfs(0, 0, path, 0, n);
        return ret;
    }
};
