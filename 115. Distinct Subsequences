Given a string S and a string T, count the number of distinct subsequences of S which equals T.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Example 1:

Input: S = "rabbbit", T = "rabbit"
Output: 3
Explanation:

As shown below, there are 3 ways you can generate "rabbit" from S.
(The caret symbol ^ means the chosen letters)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^

Example 2:

Input: S = "babgbag", T = "bag"
Output: 5
Explanation:

As shown below, there are 5 ways you can generate "bag" from S.
(The caret symbol ^ means the chosen letters)

babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^
----------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef long long int64;
    int numDistinct(string S, string T) {
        int m = T.length();
            int n = S.length();
            if (m > n) return 0;    // impossible for subsequence
            // dp[i][j] = no of subsequences in S[0...j - 1] having same value as T[0...i - 1];
            vector<vector<int64>> dp(m + 1, vector<int64>(n + 1, 0));
            for (int k = 0; k <= n; k++) dp[0][k] = 1;    // initialization
 
            for (int j = 1; j <= n; j++) {
                for (int i = 1; i <= m; i++) {
                    dp[i][j] = dp[i][j - 1] + (T[i - 1] == S[j - 1] ? dp[i - 1][j - 1] : 0);
                }
            }

            return dp[m][n];
    }
};
