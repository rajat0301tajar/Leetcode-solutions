#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
vector<vector<int>>g;
vector<int>start;
vector<int>target;
int ret;
int dp[100000][2];
int dfs(int root, int parent, bool inverted){
    int ret = 0;
    if(dp[root][inverted] != -1) return dp[root][inverted];
    if(!inverted){
        ret = (start[root] != target[root]);
    }
    else{
        ret = (!start[root] != target[root]);
    }
    for(int i = 0; i < g.size(); i++){
        if(g[root][i] && i != parent){
            cost += min(dfs(i, root, inverted), 1 + dfs(i, root, !inverted));
        }
    }
    return dp[root][inverted] = cost;
}
int main(){
  int n, x, y; 
  cin >> n;
  g.resize(n, vector<int>(n, false));
  start.resize(n); target.resize(n);
  for(int i = 0; i < n - 1; i++){
      cin >> x >> y;
      g[x - 1][y - 1] = 1;
      g[y - 1][x - 1] = 1;
  }
  for(int i = 0; i < n; i++){
      cin >> start[i];
  }
  for(int i = 0; i < n; i++){
      cin >> target[i];
  }
  memset(dp, -1, sizeof(dp));
  cout << min(dfs(0, -1, false), dfs(0, -1, true) + 1) << endl;
  return 0;
}
