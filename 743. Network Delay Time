There are N network nodes, labelled 1 to N.

Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

---------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    void dfs(map<int,vector<pair<int,int>>>&g,int u,bool visit[]){
        if(visit[u])
            return;
        visit[u] = true;
        for(auto x : g[u]){
            dfs(g,x.first,visit);
        }
    }
    int networkDelayTime(vector<vector<int>>& times, int N, int K) {
        map<int,vector<pair<int,int>>>g;
        
        for(auto x : times){
            g[x[0]].push_back({x[1],x[2]});
        }
        bool visit[N + 1];
        memset(visit,false,sizeof(visit));
        dfs(g,K,visit);
        for(int i = 1; i <= N; i++){
            if(!visit[i]){
                return -1;
            }
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,K});
        int dist[N + 1];
        dist[0] = -1;
       for(int i = 1; i <= N; i++){
           dist[i] = 99999;
       }
        dist[K] = 0;
        while(!pq.empty()){
            int sz = pq.size();
            while(sz --){
                pair<int,int> temp = pq.top();
                int u = temp.second;
                pq.pop();
                auto adj = g[u];
                for(auto x : adj){
                    int w = x.second;
                    if(dist[u] + w < dist[x.first]){
                        dist[x.first] = dist[u] + w;
                        pq.push({dist[x.first],x.first});
                    }
                }
            }
        }
        return *max_element(dist,dist + N + 1);
    }
};
