Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.

The tree is given as an array of edges where edges[i] = [u, v] is a bidirectional edge between nodes u and v.  Each node has labels in the set {0, 1, ..., edges.length}.

 

Example 1:
Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: 
A longest path of the tree is the path 1 - 0 - 2.
Example 2:
Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
Explanation: 
A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.
Constraints:

    0 <= edges.length < 10^4
    edges[i][0] != edges[i][1]
    0 <= edges[i][j] <= edges.length
    The given edges form an undirected tree
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const int maxn = 1e5;
int in[maxn];
int out[maxn];
class Solution {
public:
    map<int, vector<int>>g;
    
    // calculate in[u] = 1 + max(in[v]) (v = child of u);
    void dfs1(int u, int parent){
        in[u] = 0;
        int mx = 0;
        for(auto v : g[u]){
            if(v == parent) continue;
            dfs1(v, u);
            mx = max(mx, in[v]);
        }
        in[u] = 1 + mx;
    }
    
    // calculate out[v] = max(2 + max(in[v' != v]), 1 + out[u]);
    void dfs2(int u, int parent){
        int mx1 = 0, mx2 = 0;
        for(auto v : g[u]){
            if(v == parent) continue;
            if(mx1 <= in[v]){
                mx2 = mx1;
                mx1 = in[v];
            }
            else if(mx2 < in[v]){
                mx2 = in[v];
            }
        }
        for(auto v : g[u]){
            if(v == parent) continue;
            int use;
            if(in[v] == mx1){
                use = mx2;
            }
            else
                use = mx1;
            out[v] = max(2 + use, 1 + out[u]);
            dfs2(v, u);
        }
    }
    int treeDiameter(vector<vector<int>>& edges) {
        int n = edges.size();
        for(auto e : edges){
            g[e[0]].push_back(e[1]);
            g[e[1]].push_back(e[0]);
        }
        int ret = 0;
        dfs1(0, -1);
        dfs2(0, -1);
        for(int u = 0; u <= n; u++){
            ret = max(ret, max(in[u], out[u]));
        }
        return ret - 1;
    }
};
