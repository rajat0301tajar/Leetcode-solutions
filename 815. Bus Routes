We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.

We start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.

Example:
Input: 
routes = [[1, 2, 7], [3, 6, 7]]
S = 1
T = 6
Output: 2
Explanation: 
The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    map<int,set<int>>buses; // key bus-stop --> set of bus which pass through it.
    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {
        queue<int>q;
        bool visited[1000000];
        memset(visited,false,sizeof(visited));
        q.push(S);
        visited[S] = true;
        for(int i = 0; i < routes.size() ; i++){
            vector<int>x = routes[i];
            for(auto y : x){
                buses[y].insert(i);
            }
        }
        int ret= 0;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                int cur_stop = q.front();
                q.pop();
                if(cur_stop == T){
                    return ret;
                }
                for(auto bus : buses[cur_stop]){
                    for(auto stop : routes[bus]){
                        if(visited[stop])
                            continue;
                        visited[stop] = true;
                        q.push(stop);
                    }
                }
            }
            ret ++;
        }
        return -1;
    }
};
