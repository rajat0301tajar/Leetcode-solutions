#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
int L[10000]; // L[i] = max length of increasing subarray elements ending at index i.
int R[10000]; // R[i] = max length of decreasing subarray elements ending at index i;
int main(){
    vector<int> A = {7,1,2,4,6,5,3,8,9,10};
    fill(L, L + 10000, 1);
    int n = A.size();
    for(int i = 1; i < n; i++){
        if(A[i] > A[i - 1]){
            L[i] = 1 + L[i - 1];
        }
    }
    fill(R, R + 10000, 1);
    for(int i = n - 2; i >= 0; i--){
        if(A[i] < A[i + 1]){
            R[i] = R[i + 1] + 1;
        }
    }
    for(int i = 0; i < n; i++){
        cout << L[i] << " ";
    }
    cout << endl;
    for(int i = 0; i < n; i++){
        cout << R[i] << " ";
    }
    cout << endl;
    int ret = 1;
    for(int i = 0; i < n; i++){
        for(int j = i + 2; j < n; j++){
            ret = max(ret, L[i] + R[j]);
        }
    }
    cout << ret << endl;
    return 0;
}
