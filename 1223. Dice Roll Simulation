A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times. 

Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.

Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:

Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.

Example 2:

Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30

Example 3:

Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181

 

Constraints:

    1 <= n <= 5000
    rollMax.length == 6
    1 <= rollMax[i] <= 15
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const int mod = 1e9 + 7;
const int N = 5e3 + 10;
int dp[N][6][20];
typedef long long int64;
class Solution {
public:
   int n;
    vector<int>A;
    int solve(int pos, int prev, int cnt){
        if(pos == n){
            return 1;
        }
        int &ret = dp[pos][prev][cnt];
        if(ret > 0) return ret;
        for(int i = 0; i < 6; i++){
            if(i == prev && cnt + 1 > A[prev]){
                continue;
            }
            int temp_cnt;
            if(i == prev) temp_cnt = cnt + 1;
            else temp_cnt = 1;
            ret += solve(pos + 1, i, temp_cnt);
            ret %= mod;
        }
        return ret % mod;
    }
    int dieSimulator(int n, vector<int>& rollMax) {
        this->n = n;
        A = rollMax;
        int ret = 0;
        memset(dp, 0, sizeof(dp));
        for(int i = 0; i < 6; i++){
            ret += solve(1, i, 1);
            ret %= mod;
        }
        return ret;
    }
};
