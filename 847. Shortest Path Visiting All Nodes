An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph.

graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

 

Example 1:

Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:

Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        queue<vector<int>>q;
        bool visited[1 << n][n];
        memset(visited, false, sizeof(visited));
        for(int i = 0; i < n; i++){
            q.push({i, 1 << i, 0});
            visited[1 << i][i] = true;
        }
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                vector<int> temp = q.front();
                q.pop();
                int u = temp[0]; 
                int mask = temp[1];
                int d = temp[2];
                if(mask == ((1 << n) - 1)){
                    return d;
                }
                for(auto i : graph[u]){
                    if(!visited[mask | (1 << i)][i]){
                        q.push({i, mask | (1 << i), d + 1});
                        visited[mask | (1 << i)][i] = true;
                    }
                }
            }
        }
        return -1;
    }
};
----------------------------
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int visited[1<<n][n];
        memset(visited,-1,sizeof(visited));
         queue<pair<int,int>>q;
        for(int i = 0; i < n; i++){
            visited[1<<i][i]=0;
            q.push({(1<<i),i});
        }
       
        while(!q.empty()){
            int mask = q.front().first;
            int u = q.front().second;
            q.pop();
            if(mask == ((1<<n)-1))
                return visited[mask][u];
            for(auto x : graph[u]){
                int next_mask = mask | (1<<x);
                if(visited[next_mask][x]>=0)
                    continue;
                visited[next_mask][x] = 1 + visited[mask][u];
                q.push({next_mask,x});
            }
        }
        return -1;
    }
};

// METHOD 2 : USING FLOYD WARSHALL + BITMASKING (dp) : 
typedef long long int64;
const int N = 12;
int64 dist[N][N];
int64 dp[N][1 << N];
class Solution {
public:
    void floydWarshall(int n){
        for(int k = 0; k < n; k++){
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        for(int i = 0; i < n; i++){
            fill(dist[i], dist[i] + n, 1 << 30);
        }
        
        for(int i = 0; i < n; i++){
            dist[i][i] = 0;
        }
        for(int i = 0; i < n; i++){
            for(auto x : graph[i]){
                dist[i][x] = 1;
            }
        }
        floydWarshall(n);
        for(int i = 0; i < n; i++){
            fill(dp[i], dp[i] + (1 << n), 1 << 30);
        }
        for(int i = 0; i < n; i++){
            dp[i][1 << i] = 0;
        }
        for(int k = 0; k < (1 << n); k++){
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    if(((k >> i) & 1) == 1 && ((k >> j) & 1)== 0){
                        dp[j][k | (1 << j)] = min(dp[j][k | (1 << j)], (int64)dp[i][k] + dist[i][j]);
                    }
                }
            }
        }
        int64 ret = 1 << 30;
        for(int i = 0; i < n; i++){
            ret = min(ret, dp[i][(1 << n) - 1]);
        }
        return ret;
    }
};

METHOD 3 : DP APPROACH with Bellman Ford Algorithm : 
class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int dp[n][1 << n];
        for(int i = 0; i < n; i++){
            fill(dp[i], dp[i] + (1 << n), n * n);
        }
        for(int i = 0; i < n; i++){
            dp[i][1 << i] = 0;
        }
        for(int k = 0; k < (1 << n); k++){
            bool repeat = true;
            while(repeat){
                repeat = false;
                for(int i = 0; i < n; i++){
                    int d = dp[i][k];
                    for(auto x : graph[i]){
                        int next_mask = k | (1 << x);
                        if(d + 1 < dp[x][next_mask]){
                            dp[x][next_mask] = d + 1;
                            if(k == next_mask) repeat = true;
                        }
                    }
                }
            }
        }
        int ret = 1 << 30;
        for(int i = 0; i < n; i++){
            ret = min(ret, dp[i][(1 << n) - 1]);
        }
        return ret;
    }
};

METHOD 4 : USING PRIORITY QUEUE : 
class Solution {
public:
    typedef pair<int,int> pii;
    int shortestPathLength(vector<vector<int>>& graph) {
        int n = graph.size();
        int visited[1<<12][12];
        memset(visited,-1,sizeof(visited));
        auto cmp = [&visited] (auto &a, auto &b){
            return visited[a.first][a.second] > visited[b.first][b.second];
        };
        priority_queue<pii, vector<pii>, decltype(cmp)>q(cmp);
        for(int i = 0; i < n; i++){
            visited[1<<i][i]=0;
            q.push({(1<<i),i});
        }
       
        while(!q.empty()){
            int mask = q.top().first;
            int u = q.top().second;
            q.pop();
            if(mask == ((1<<n)-1))
                return visited[mask][u];
            for(auto x : graph[u]){
                int next_mask = mask | (1<<x);
                if(visited[next_mask][x]>=0)
                    continue;
                visited[next_mask][x] = 1 + visited[mask][u];
                q.push({next_mask,x});
            }
        }
        /*int ans  = INT_MAX;
        for(int i =0 ;i< n;i++){
            ans = min(ans, visited[(1<<n)-1][i]);
        }*/
        //return ans;
        return -1;
    }
};
