In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

    Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
    C_1 is at location (0, 0) (ie. has value grid[0][0])
    C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
    If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).

Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]
Output: 2
----------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    
    
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int visited[101][101];
        memset(visited,-1,sizeof(visited));
        queue<pair<int,int>>q;
        int n = grid.size(); int m = grid[0].size();
        if(grid[0][0] == 1){
            return -1;
        }
        q.push({0,0});
        visited[0][0]=1;
        int dx[8] = {-1,-1,0,1,1,1,0,-1};
        int dy[8] = {0,1,1,1,0,-1,-1,-1};
        while(!q.empty()){
            pair<int,int> point = q.front();
            int x = point.first;
            int y = point.second;
            if(x== n-1 && y== m-1 && grid[x][y] == 0){
                return visited[x][y];
            }
            q.pop();
            for(int i = 0 ; i < 8; i++){
                int next_x= x + dx[i];
                int next_y= y + dy[i];
                if(next_x>=0 && next_x<n && next_y>=0 && next_y<m && visited[next_x][next_y] == -1 && grid[next_x][next_y]==0){
                    q.push({next_x,next_y});
                    visited[next_x][next_y]= visited[x][y] + 1;
                }
            }
        }
        return -1;
    }
};
