Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2

Example 2:

Input: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

Output: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3

Follow up:

    A solution using O(n) space is pretty straight forward.
    Could you devise a constant space solution?
----------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int>order;
    void helper(TreeNode *root){
        if(root == NULL) return;
        helper(root->left);
        order.push_back(root->val);
        helper(root->right);
    }
    void dfs(TreeNode *root, int &idx){
        if(root == NULL) return;
        dfs(root->left, idx);
        root->val = order[idx++];
        dfs(root->right, idx);
    }
    void recoverTree(TreeNode* root) {
        helper(root);
        sort(order.begin(),order.end());
        int idx = 0;
        dfs(root, idx);
    }
};
