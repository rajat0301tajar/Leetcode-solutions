 You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:

Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int findLongestChain(vector<vector<int>>& pairs) {
        int n = pairs.size();
        int dp[n];
        for(int i = 0; i < n; i++){
            dp[i] = 1; // longest chain length ending at index and including i th pair.
        }
        auto cmp = [](auto &a, auto &b){
            if(a[0] < b[0]) return true;
            else if(a[0] == b[0] && a[1] < b[1]) return true;
            return false;
        };
        sort(pairs.begin(),pairs.end(),cmp);
        //sort(pairs.begin(),pairs.end());
        for(int i = 0; i < n; i++){
            cout<<pairs[i][0]<<" "<<pairs[i][1]<<"--";
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(pairs[j][1] < pairs[i][0] && dp[i] < dp[j] + 1){
                    dp[i] = dp[j] + 1;
                }
            }
        }
        return dp[n - 1];
    }
};
