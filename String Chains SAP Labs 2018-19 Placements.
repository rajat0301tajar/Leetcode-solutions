#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
set<string>st;
vector<string>A;
map<string, vector<string>>g;
map<string, bool> visited;
map<string, int>in_degree;
void dfs(string u, int dist, int &ans){
    if(visited[u]) return;
    visited[u] = true;
    ans = max(dist, ans);
    for(auto x : g[u]){
        dfs(x, dist + 1, ans);
    }
}
int main(){
    int n; cin >> n;
    A.resize(n);
    for(int i = 0; i < n; i++){
        cin >> A[i];
        st.insert(A[i]);
    }
    for(int i = 0; i < n; i++){
        string s = A[i]; int m = s.size();
        for(int j = 1; j < m - 1; j++){
            string temp = s.substr(0, j) + s.substr(j + 1, m - j);
            if(st.count(temp)){
                g[s].push_back(temp);
                in_degree[temp]++;
            }
        }
        string t1 = s.substr(1);
        string t2 = s.substr(0, m - 1);
        if(st.count(t1)) {
            g[s].push_back(t1);
            in_degree[t1]++;
        }
        if(st.count(t2)) {
            g[s].push_back(t2);
            in_degree[t2]++;
        }
    }
    int ret  = 0;
    for(auto x : A){
        if(!visited[x] && in_degree[x] == 0){
            int dist = 0;
            dfs(x, 1, dist);
            ret = max(ret, dist);
        }
    }
    cout<<ret<<endl;
    return 0;
}
