 A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26

Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:

Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();
        long long dp[n + 1]; // dp[i] = no of ways of decoding till index i - 1.
        memset(dp,0,sizeof(dp));
        dp[0] = 1;
        if(s[0] == '0'){
            return 0;
        }
        dp[1] = s[0] == '*' ? 9 : 1;
        for(int i = 2; i <= n; i++){
            char first = s[i - 2];
            char second = s[i - 1];
            
            // for dp[i - 1]
            if(second == '*'){
                dp[i] += 9 * dp[i - 1];
                dp[i] %= 1000000007;
            }
            else if(second > '0'){
                dp[i] += dp[i - 1];
                dp[i] %= 1000000007;
            }
            // for dp[i - 2]
            if(first == '*'){
                if(second == '*'){
                    dp[i] += 15 * dp[i - 2];
                    dp[i] %= 1000000007;
                }else if(second <= '6'){
                    dp[i] += 2 * dp[i - 2];
                    dp[i] %= 1000000007;
                }else{
                    dp[i] += dp[i - 2];
                    dp[i] %= 1000000007;
                }
            }else if(first == '1' || first == '2'){
                if(second == '*'){
                    if(first == '1'){
                        dp[i] += 9 * dp[i - 2];
                        dp[i] %= 1000000007;
                    }else{  // first == '2'
                        dp[i] += 6 * dp[i - 2];
                        dp[i] %= 1000000007;
                    }
                }else if(((first - '0') * 10 + (second - '0')) <= 26){
                    dp[i] += dp[i - 2];
                    dp[i] %= 1000000007;
                }
            }
            dp[i] %= 1000000007;
        }
        return dp[n];
    }
};
