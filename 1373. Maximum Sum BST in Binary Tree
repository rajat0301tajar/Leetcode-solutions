Given a binary tree root, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:

    The left subtree of a node contains only nodes with keys less than the node's key.
    The right subtree of a node contains only nodes with keys greater than the node's key.
    Both the left and right subtrees must also be binary search trees.

 

Example 1:
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.

Example 2:
Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.
--------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
unordered_map<TreeNode*, int> sum;
unordered_map<TreeNode*, bool> isBST;
int ans;
// sum[node] = sum of all nodes in the tree with node as root.
// sum[node] = sum[node->left] + sum[node->right] + (node->val);
// first calculate answer for child then answer for parent.
class Solution {
public:
    void dfs(TreeNode* root){
        if(!root) {
            isBST[root] = true;
            sum[root] = 0;
            return;
        }
        dfs(root->left);
        dfs(root->right);
        sum[root] = sum[root->left] + sum[root->right] + root->val;
        isBST[root] = isBST[root->left] && isBST[root->right];
        if(root->left && root->left->val >= root->val) isBST[root] = false;
        if(root->right && root->right->val <= root->val) isBST[root] = false;
        if(isBST[root]){
            ans = max(ans, sum[root]);
        }
    }
    int maxSumBST(TreeNode* root) {
        ans = INT_MIN;
        dfs(root);
        return max(0, ans);
    }
};
