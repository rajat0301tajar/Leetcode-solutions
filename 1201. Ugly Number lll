

Write a program to find the n-th ugly number.

Ugly numbers are positive integers which are divisible by a or b or c.

 

Example 1:

Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.

Example 2:

Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 12... The 4th is 6.

Example 3:

Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.

Example 4:

Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
Output: 1999999984

 

Constraints:

    1 <= n, a, b, c <= 10^9
    1 <= a * b * c <= 10^18
    It's guaranteed that the result will be in range [1, 2 * 10^9]
-------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef long long int64;
    bool check(int64 x, int &a, int &b, int &c, int &n){
        int64 ab = (int64)a * b / __gcd((int64) a,(int64) b);
        int64 bc = (int64)b * c / __gcd((int64) b,(int64) c);
        int64 ca = (int64)c * a / __gcd((int64) c,(int64) a);
        int64 abc = (int64)a * bc / __gcd((int64) a,(int64) bc);
        
        int64 temp = (int64)x/a + x/b + x/c - (x/ab + x/bc + x/ca) + x/abc;
        return temp < n;
    }
    int nthUglyNumber(int n, int a, int b, int c) {
        int64 l = 1, r = 2 * 1e9;
        while(l < r){
            int64 mid = (l + r) / 2;
            if(check(mid, a, b, c, n)){
                l = mid + 1;
            }
            else
                r = mid;
        }
        return r;
    }
};
