There are N courses, labelled from 1 to N.

We are given relations[i] = [X, Y], representing a prerequisite relationship between course X and course Y: course X has to be studied before course Y.

In one semester you can study any number of courses as long as you have studied all the prerequisites for the course you are studying.

Return the minimum number of semesters needed to study all courses.  If there is no way to study all the courses, return -1.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOPOLOGICAL SORT USING IN DEGREE:
class Solution {
public:
    map<int,vector<int>>g;
    int minimumSemesters(int N, vector<vector<int>>& relations) {
        for(auto x : relations){
            g[x[0]].push_back(x[1]);
        }
        int n = N;
        vector<int>in_degree(n + 1,0);
        for(int i = 1; i <= n; i++){
            auto adj = g[i];
            for(auto x : adj){
                in_degree[x]++;
            }
        }
        
        queue<int>q;
        for(int i = 1; i <= n; i++){
            if(in_degree[i] == 0){
                q.push(i);
            }
        }
        int c = 0; // no of nodes covered.
        int ret = 0; // minimum no of sem required to complete all courses.
        while(!q.empty()){
            int sz = q.size();            
            while(sz --){
                int temp = q.front();
                cout<<temp<<endl;
                q.pop();
                c++;
                
                auto adj = g[temp];
                for(auto x : adj){
                    in_degree[x]--;
                    if(in_degree[x] == 0){
                        q.push(x);
                    }
                }
            }
            ret++;
            if(c == n){
                    return ret;
            }
        }
        return -1;// cycle present.
    }
};
