We are stacking blocks to form a pyramid. Each block has a color which is a one letter string.

We are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.

We start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.

Return true if we can build the pyramid all the way to the top, otherwise false.

Example 1:

Input: bottom = "BCD", allowed = ["BCG", "CDE", "GEA", "FFF"]
Output: true
Explanation:
We can stack the pyramid like this:
    A
   / \
  G   E
 / \ / \
B   C   D

We are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    void getList(string bottom, int idx, int i, char path[], vector<string> &ls, map<string,vector<char>>&mp){
        int n = bottom.size();
        if(idx == n - 1){
            string temp(path,path + idx);
            ls.push_back(temp);
            //cout<<temp<<endl;
            return;
        }
        for(auto x : mp[bottom.substr(idx,2)]){
            path[i] = x;
            getList(bottom, idx + 1, i + 1, path, ls, mp);
        }
    }
    bool helper(string bottom, map<string,vector<char>>&mp){
        int n = bottom.size();
        if(n == 1){
            return true;
        }
        for(int i = 0; i < n - 1; i++){
            if(mp.count(bottom.substr(i,2)) == 0){
                return false;
            }
        }
        vector<string>ls; 
        char path[5000];
        getList(bottom, 0, 0, path, ls, mp);  // get all possible bottom at next upper level.
        for(auto x : ls){
            if(helper(x,mp))  // try each bottom till anyone is true.
                return true;
        }
        return false;
    }
    bool pyramidTransition(string bottom, vector<string>& allowed) {
        map<string,vector<char>>mp;
        for(auto x : allowed){
            mp[x.substr(0,2)].push_back(x[2]);
        }
        return helper(bottom, mp);
    }
};
