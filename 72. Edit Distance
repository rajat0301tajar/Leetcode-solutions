Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

    Insert a character
    Delete a character
    Replace a character

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int minDistance(string w1, string w2) {
        int n = w1.size(); int m = w2.size();
        int dp[n + 1][m + 1];
        // dp[i][j] = min dist between w1[0...i - 1] and w2[0...j - 1].
        // ans = dp[n][m];
        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= m; j++){
                dp[i][j] = 1 << 29;
            }
        }
        dp[0][0] = 0;
        
        for(int i = 1; i <= m; i++){
            dp[0][i] = i;
        }
        for(int i = 1; i <= n; i++){
            dp[i][0] = i;
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(w1[i - 1] == w2[j - 1]){
                    dp[i][j] = dp[i - 1][j - 1];
                    continue;
                }
                dp[i][j] = 1 + min(dp[i - 1][j - 1] // replace operation
                                   , min(dp[i - 1][j] // delete operation
                                    // w1[i] deleted, need to match w1[0...i - 1] , w2[0...j]
                                      , dp[i][j - 1] // insert operation
                                       // last inserted character in w1 matches w2[j];
                                       // so need to match w1[0...i] & w2[0...j - 1]
                                      ));
            }
        }
        /*for(int i = 0; i <= n; i++){
            for(int j = 0; j <= m; j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }*/
        return dp[n][m];
    }
        
};
