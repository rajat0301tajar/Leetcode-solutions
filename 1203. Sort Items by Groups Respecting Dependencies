There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:

    The items that belong to the same group are next to each other in the sorted list.
    There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item).

Return any solution if there is more than one solution and return an empty list if there is no solution.

 

Example 1:

Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]

Example 2:

Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
Output: []
Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.

 

Constraints:

    1 <= m <= n <= 3*10^4
    group.length == beforeItems.length == n
    -1 <= group[i] <= m-1
    0 <= beforeItems[i].length <= n-1
    0 <= beforeItems[i][j] <= n-1
    i != beforeItems[i][j]
    beforeItems[i] does not contain duplicates elements.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const int N = 3e4 + 11;
bool flag[N], flag2[N];
vector<int> a[N], b[N], A[N];
vector<int> topo, topo2;
bool instack[N];  // for cycle detection...

// for topo of group
bool DFS(int u){
    if(flag[u]){
        if(instack[u]) return false; // cycle detection.
        return true;
    }
    flag[u] = true;
    instack[u] = true;
    for(auto &v : a[u]){
        if(!DFS(v)) return false;
    }
    topo.push_back(u);
    instack[u] = false;
    return true;
}

// for topo within each group.
bool DFS2(int u){
    if(flag2[u]){
        if(instack[u]) return false; // cycle detection.
        return true;
    }
    flag2[u] = true;
    instack[u] = true;
    for(auto &v : b[u]){
        if(!DFS2(v)) return false;
    }
    topo2.push_back(u);
    instack[u] = false;
    return true;
}

class Solution {
public:
    vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>& beforeItems) {
        for(int i = 0; i < N; i++) A[i].clear();
        for(int i = 0; i < n; i++){
            if(group[i] < 0) group[i] = m++;
            // for storing what group has what elements.
            A[group[i]].push_back(i);
        }
        
        for(int i = 0; i < m; i++) a[i].clear();
        for(int i = 0; i < n; i++) b[i].clear();
        
        // forming directed graph between groups, and elements.
        for(int i = 0; i < n; i++){
            for(auto j : beforeItems[i]){
                int x = group[j], y = group[i];
                if(x != y){
                    a[x].push_back(y); //---> y comes after x
                }
                else{
                    b[j].push_back(i); //---> i comes after j
                }
            }
        }
        
        fill(instack, instack + m, false);
        fill(flag, flag + m, false);
        topo.clear();
        for(int i = 0; i < m; i++){
            if(!DFS(i)) return {};
        }
        
        fill(instack, instack + n, false);
        fill(flag2, flag2 + n, false);
        topo2.clear();
        for(int i = 0; i < n; i++){
            if(!DFS2(i)) return {};
        }
        
        reverse(topo.begin(), topo.end());
        reverse(topo2.begin(), topo2.end());
        
        vector<int>idx(n);
        for(int i = 0; i < n; i++) idx[topo2[i]] = i;
        
        auto comp = [&idx](auto &u, auto &v){
            return idx[u] < idx[v];
        };
        
        vector<int>ret;
        for(auto x : topo){
            sort(A[x].begin(), A[x].end(), comp);
            for(auto it : A[x]) ret.push_back(it);
        }
        
        return ret;
    }
};
