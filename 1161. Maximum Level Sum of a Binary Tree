Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level X such that the sum of all the values of nodes at level X is maximal.
Input: [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
--------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        q.push({root , 1});
        int finalLevel = 1;
        int sumLevel = root->val;
        while(!q.empty()){
            int sz = q.size();
            int cur = 0;
            int lvl;
            while(sz--){
                auto temp = q.front();
                TreeNode *node = temp.first;
                lvl = temp.second;
                q.pop();
                cur += node->val;
                if(node->left){
                    q.push({node->left, lvl + 1});
                }
                if(node->right){
                    q.push({node->right,lvl + 1});
                }
            }
            if(cur > sumLevel){
                sumLevel = cur;
                finalLevel = lvl;
            }
        }
        return finalLevel;
    }
};
