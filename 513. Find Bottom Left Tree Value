 Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:

Input:

    2
   / \
  1   3

Output:
1

Example 2:

Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7

Note: You may assume the tree (i.e., the given root node) is not NULL. 
-------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int height(TreeNode *root){
        if(root == NULL) return 0;
        return 1 + max(height(root->left),height(root->right));
    }
    int findBottomLeftValue(TreeNode* root) {
        int h = height(root);
        if(h == 1) return root->val;
        queue<TreeNode *>q;
        q.push(root);
        int lvl = 0;
        while(!q.empty()){
            lvl++;
            int sz = q.size();
            int S = sz;
            while(sz--){
                TreeNode *temp = q.front();
                q.pop();
                if(lvl == h && sz == S - 1){
                    return temp->val;
                }
                if(temp->left) q.push(temp->left);
                if(temp->right) q.push(temp->right);
            }
        }
        return 0;
    }
};
