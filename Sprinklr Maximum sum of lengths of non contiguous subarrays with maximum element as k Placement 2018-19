#include <bits/stdc++.h> 
using namespace std; 
   
// Returns max sum of lengths with maximum element 
// as k 
int calculateMaxSumLength(int arr[], int n, int k) 
{ 
    int ans = 0; // final sum of lengths 
   
    // number of elements in current subarray 
    int count = 0;  
   
    // variable for checking if k appeared in subarray 
    int flag = 0;  
   
    for (int i = 0; i < n;) { 
        count = 0; 
        flag = 0; 
   
        // count the number of elements which are 
        // less than equal to k 
        while (arr[i] <= k && i < n) { 
            count++; 
            if (arr[i] == k) 
                flag = 1; 
            i++; 
        } 
   
        // if current element appeared in current  
        // subarray add count to sumLength 
        if (flag == 1)  
            ans += count;     
   
        // skip the array elements which are  
        // greater than k 
        while (arr[i] > k && i < n)  
            i++;      
    } 
    return ans; 
} 
   
// driver program 
int main() 
{ 
    int arr[] = { 4, 5, 7, 1, 2, 9, 8, 4, 3, 1 }; 
    int size = sizeof(arr) / sizeof(arr[0]); 
    int k = 4; 
    int ans = calculateMaxSumLength(arr, size, k); 
    cout << "Max Length :: " << ans << endl; 
    return 0; 
}
