Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.

Example 2:

Input: [1,2,2,3,1,4,2]
Output: 6

Note:
nums.length will be between 1 and 50,000.
nums[i] will be an integer between 0 and 49,999.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int findShortestSubArray(vector<int>& A) {
        map<int, pair<int,int>>pos;
        int n = A.size();
        map<int,int>freq;
        int mx = 0;
        for(int i = 0; i < n; i++){
            freq[A[i]]++;
            mx = max(mx, freq[A[i]]);
        }
        
        unordered_set<int> st;
        for(auto x : freq){
            if(x.second == mx){
                st.insert(x.first);
            }
        }
        int ret = 1 << 30;
        for(int i = 0; i < n; i++){
            if(st.count(A[i]) == 0) continue;
            if(pos.count(A[i]) == 0){
                pos[A[i]].first = i;
                pos[A[i]].second = i;
            }
            else{
                pos[A[i]].second = i;
                
            }
        }
        for(auto x : pos){
            ret = min(ret, x.second.second - x.second.first + 1);
        }
        return ret;
    }
};
