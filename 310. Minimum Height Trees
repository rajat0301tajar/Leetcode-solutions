For an undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1 :

Input: n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3 

Output: [1]

Example 2 :

Input: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5 

Output: [3, 4]
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Any node that has already been a leaf cannot be the root of a MHT, because its adjacent non-leaf node will always be a better candidate.
We start from every end, by end we mean vertex of degree 1 (aka leaves). We let the pointers move the same speed. When two pointers meet, we keep only one of them, until the last two pointers meet or one step away we then find the roots.

It is easy to see that the last two pointers are from the two ends of the longest path in the graph.

The actual implementation is similar to the BFS topological sort. Remove the leaves, update the degrees of inner vertexes. Then remove the new leaves. Doing so level by level until there are 2 or 1 nodes left. What's left is our answer!

The time complexity and space complexity are both O(n).

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        queue<int>q;
        if(n == 1){
            return {0};
        }
        int in_degree[n]; memset(in_degree,0,sizeof(in_degree));
        map<int,vector<int>>g;
        for(auto x : edges){
            in_degree[x[0]]++; g[x[0]].push_back(x[1]);
            in_degree[x[1]]++; g[x[1]].push_back(x[0]);
        }
        for(int i = 0; i < n; i++){
            if(in_degree[i] == 1){
                q.push(i);
            }
        }
        while(!q.empty() && n > 2){
            n -= q.size();
            int sz = q.size();
            while(sz --){
                int node = q.front(); q.pop();
                for(auto x : g[node]){
                    in_degree[x]--;
                    if(in_degree[x] == 1){
                        q.push(x);
                    }
                }
            }
        }
        vector<int>ret;
        while(!q.empty()){
            ret.push_back(q.front());
            q.pop();
        }
        return ret;
    }
};
