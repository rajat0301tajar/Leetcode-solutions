In a 1 million by 1 million grid, the coordinates of each grid square are (x, y) with 0 <= x, y < 10^6.

We start at the source square and want to reach the target square.  Each move, we can walk to a 4-directionally adjacent square in the grid that isn't in the given list of blocked squares.

Return true if and only if it is possible to reach the target square through a sequence of moves.

 

Example 1:

Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
Output: false
Explanation: 
The target square is inaccessible starting from the source square, because we can't walk outside the grid.

Example 2:

Input: blocked = [], source = [0,0], target = [999999,999999]
Output: true
Explanation: 
Because there are no blocked cells, it's possible to reach the target square.
------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    set<pair<int,int>>s;
    set<pair<int,int>>visited;
    bool helper(vector<int>&src,vector<int>&dest,int x,int y,int cnt){
        if(x<0 || y<0 || x>=1000000 || y>=1000000){
            return false; 
        }
        if(s.find({x,y})!=s.end())
            return false;
        if(visited.find({x,y})!=visited.end()) 
            return false;
        visited.insert({x,y});
        if(x==dest[0] && y==dest[1])
            return true;
        if(cnt>20000)
            return true;
        if(helper(src,dest,x-1,y,cnt+1)){
            return true;
        }
        if(helper(src,dest,x,y-1,cnt+1)){
            return true;
        }
        if(helper(src,dest,x+1,y,cnt+1)){
            return true;
        }
        if(helper(src,dest,x,y+1,cnt+1))
            return true;
        return false;
    }
    bool isEscapePossible(vector<vector<int>>& blocked, vector<int>& source, vector<int>& target) {
        for(int i=0;i<blocked.size();i++){
            s.insert({blocked[i][0],blocked[i][1]});
        }
        if(helper(source,target,source[0],source[1],0))
        {
           visited.clear();
            if(helper(target,source,target[0],target[1],0)){
                return true;
            }
        }
        return false;
    }
};
