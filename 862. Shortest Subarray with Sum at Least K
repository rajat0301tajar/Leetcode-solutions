Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.

 

Example 1:

Input: A = [1], K = 1
Output: 1

Example 2:

Input: A = [1,2], K = 4
Output: -1

Example 3:

Input: A = [2,-1,2], K = 3
Output: 3
-------------------------------------------------------------------------------------------------------------
Intuition

We can rephrase this as a problem about the prefix sums of A. Let P[i] = A[0] + A[1] + ... + A[i-1]. We want the smallest y-x such that y > x and P[y] - P[x] >= K.

Motivated by that equation, let opt(y) be the largest x such that P[x] <= P[y] - K. We need two key observations:

    If x1 < x2 and P[x2] <= P[x1], then opt(y) can never be x1, as if P[x1] <= P[y] - K, then P[x2] <= P[x1] <= P[y] - K but y - x2 is smaller. This implies that our candidates x for opt(y) will have increasing values of P[x].

    If opt(y1) = x, then we do not need to consider this x again. For if we find some y2 > y1 with opt(y2) = x, then it represents an answer of y2 - x which is worse (larger) than y1 - x.

class Solution {
public:
    int shortestSubarray(vector<int>& A, int K) {
        int N=A.size();
        vector<int>prefix(N+1,0);
        for(int i=0;i<N;i++){
            prefix[i+1]=prefix[i] + A[i];
        }
        int ans=N+1;
        deque<int>dq;
        for(int y=0;y<prefix.size();y++){
            while(!dq.empty() && prefix[y] <= prefix[dq.back()])
                dq.pop_back();
            while(!dq.empty() && prefix[y] >= prefix[dq.front()] + K)
                ans= min(ans, y-dq.front()),dq.pop_front();
            dq.push_back(y);
        }
        return ans < N+1 ? ans : -1;
    }
};
