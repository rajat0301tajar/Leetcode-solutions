Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

    1 ≤ n ≤ 1000
    1 ≤ m ≤ min(50, n)

Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

-----------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int splitArray(vector<int>& A, int m) {
        int n = A.size(); 
        long long dp[n][m + 1]; 
        // dp[i][j] --> minimum possible largest sum of a partition in A[0...i] with j partitions.
        // relation b/w : dp[i][j] = min(max(dp[k][j - 1], sum(A[k + 1...i])) over k < i
        for(int i = 0; i < n; i++){
            for(int j = 0; j <= m; j++){
                dp[i][j] = INT_MAX;
            }
        }
        long long sum[n];
        memset(sum,0,sizeof(sum));
        sum[0] = A[0];
        for(int i = 1; i < n; i++){
            sum[i] += sum[i - 1] + A[i];
        }
        for(int i = 0; i < n; i++){
            dp[i][1] = sum[i];
        }
        for(int j = 2; j <= m; j++){
            for(int i = 0; i < n; i++){
                for(int k = 0; k < i; k++){
                    dp[i][j] = min(dp[i][j], max(dp[k][j - 1], sum[i] - sum[k]));
                }
            }
        }
        /*for(int i = 0; i < n; i++){
            for(int j = 1; j <= m; j++){
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }*/
        return dp[n - 1][m > n ? n : m];
    }
};
