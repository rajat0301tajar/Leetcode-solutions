Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

 

Note:

Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

 

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int dirs[4][2] = {{-1,0},{0,-1},{1,0},{0,1}};
    int trapRainWater(vector<vector<int>>& A) {
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>>pq;
        int n = A.size();
        if(n <= 1) return 0;
        int m = A[0].size();
        bool visited[n][m];
        memset(visited,false,sizeof(visited));
        for(int i = 0; i < m; i++){
            pq.push({A[0][i],0,i}); visited[0][i] = true;
            pq.push({A[n - 1][i],n - 1, i}); visited[n - 1][i] = true;
        }
        for(int i = 1; i < n; i++){
            pq.push({A[i][0],i,0}); visited[i][0] = true;
            pq.push({A[i][m - 1],i,m - 1}); visited[i][m - 1] = true;
        }
        int ret = 0;
        while(!pq.empty()){
            int sz = pq.size();
            while(sz --){
                vector<int>temp = pq.top();
                pq.pop();
                int h = temp[0];
                int x = temp[1];
                int y = temp[2];
                for(auto dir : dirs){
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if(nx < 0 || ny < 0 || nx >= n || ny >= m || visited[nx][ny]) continue;
                    if(A[nx][ny] < h){
                        ret += h - A[nx][ny];
                    }
                    pq.push({max(A[nx][ny],h), nx,ny});
                    visited[nx][ny] = true;
                }
            }
        }
        return ret;
    }
};
