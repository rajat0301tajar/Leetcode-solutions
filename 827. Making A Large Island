In a 2D grid of 0s and 1s, we change at most one 0 to a 1.

After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).

Example 1:

Input: [[1, 0], [0, 1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.

Example 2:

Input: [[1, 1], [1, 0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:

Input: [[1, 1], [1, 1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
-------------------------------------------------------------------------------------------------------------------------------
For each 1 in the grid, we paint all connected 1 with the next available color (2, 3, and so on). We also remember the size of the island we just painted with that color.

Then, we analyze all 0 in the grid, and sum sizes of connected islands (based on the island color). Note that the same island can connect to 0 more than once. The example below demonstrates this idea (the answer is highlighted):

int get(int i, int j, vector<vector<int>>& g) {
  return (i < 0 || j < 0 || i >= g.size() || j >= g[0].size()) ? 0 : g[i][j];
}
int paint(int i, int j, int clr, vector<vector<int>>& g)
{
  if (get(i, j, g) != 1) return 0;
  g[i][j] = clr;
  return 1 + paint(i + 1, j, clr, g) + paint(i - 1, j, clr, g) + paint(i, j + 1, clr, g) + paint(i, j - 1, clr, g);
}
int largestIsland(vector<vector<int>>& g, int res = 0) {
  vector<int> sizes = { 0, 0 }; // sentinel values; colors start from 2.
  for (auto i = 0; i < g.size(); ++i)
    for (auto j = 0; j < g[i].size(); ++j)
      if (g[i][j] == 1) sizes.push_back(paint(i, j, sizes.size(), g));
  for (auto i = 0; i < g.size(); ++i)
    for (auto j = 0; j < g[i].size(); ++j)
      if (g[i][j] == 0) {
        unordered_set<int> s = { get(i + 1, j, g), get(i - 1, j, g), get(i, j + 1, g), get(i, j - 1, g) };
        res = max(res, 1 + accumulate(begin(s), end(s), 0, [&](int a, int b) {return a + sizes[b]; }));
      }
  return res == 0 ? g.size() * g[0].size() : res;
}

Brute Force : 
class Solution {
public:
    int dx[4]={0,-1,0,1};
    int dy[4]={1,0,-1,0};
    bool safe(int x,int y,int n,int m){
        if(x >= n || x < 0 || y >=m || y < 0)
            return false;
        return true;
    }
    void dfs(int x,int y,int &ret,int &ans,vector<vector<int>>& grid,bool visited[50][50]){
        if(!safe(x,y,grid.size(),grid[0].size()) || visited[x][y] || (!grid[x][y])){
            return;
        }
        visited[x][y] = true;
        ans++;
        ret = max(ret,ans);
        for(int k = 0 ; k < 4 ; k++){
            int next_x = x + dx[k];
            int next_y = y + dy[k];
            dfs(next_x,next_y,ret,ans,grid,visited);             
        }
    }
    
    int largestIsland(vector<vector<int>>& grid) {
        int ret =1 ;
        for(int i = 0; i < grid.size() ; i++){
            for(int j = 0 ; j < grid[0].size() ; j++){
                if(grid[i][j] == 1){
                    bool visited[50][50];
                    memset(visited,false,sizeof(visited));
                    int ans = 0;
                    dfs(i,j,ret,ans,grid,visited);
                    ret = max(ans,ret);
                    //cout<<"2-->"<<ans<<endl;
                }
                else if(grid[i][j] == 0){
                    bool visited[50][50];
                    memset(visited,false,sizeof(visited));
                    grid[i][j] = 1;
                    int ans = 0;
                    dfs(i,j,ret,ans,grid,visited);      
                    grid[i][j] = 0;
                    ret = max(ans,ret);
                    //cout<<"1-->"<<ans<<endl;
                }
            }
        }
        return ret;
    }
};
