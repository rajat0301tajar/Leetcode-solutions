Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:

Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.

Note:

    2 <= len(nums) <= 10000.
    0 <= nums[i] < 1000000.
    1 <= k <= len(nums) * (len(nums) - 1) / 2.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search Solution : 
class Solution {
public:
    int smallestDistancePair(vector<int>& A, int k) {
        sort(A.begin(), A.end());
        int n = A.size();
        int mx = A[n - 1] - A[0];
        int l = 0; int r = mx;
        // need to find first yes.
        while(l < r){
            int m = l + (r - l) / 2;
            int cnt = 0;
            for(int i = 0, j = 0; i < n; i++){
                while(j < n && A[j] - A[i] <= m) j++;
                cnt += j - i - 1;
            }
            if(cnt < k){
                l = m + 1;
            }
            else
                r = m;
        }
        return r;
    }
};


TLE SOLUTION USING PRIORITY QUEUE : 
class Solution {
public:
    typedef pair<int,int>pii;
    int smallestDistancePair(vector<int>& nums, int k) {
        int n = nums.size();
        auto cmp = [](auto &a, auto &b){
            if(abs(a.first - a.second) < abs(b.first - b.second)){
               return true;
            }
            return false;
        };
        int c = 0; // no of elements inside pq.
        priority_queue<pii,vector<pii>,decltype(cmp)>pq(cmp);
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(c < k){
                    pq.push({nums[i],nums[j]});
                    c++;
                }
                else{
                    pii tp = pq.top();
                    pii curr = {nums[i], nums[j]};
                    if(abs(curr.first - curr.second) < abs(tp.first - tp.second)){
                        pq.pop();
                        pq.push(curr);
                    }
                }
            }
        }
        pii ret = pq.top();
        return abs(ret.first - ret.second);
    }
};
