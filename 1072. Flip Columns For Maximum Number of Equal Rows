Given a matrix consisting of 0s and 1s, we may choose any number of columns in the matrix and flip every cell in that column.  Flipping a cell changes the value of that cell from 0 to 1 or from 1 to 0.

Return the maximum number of rows that have all values equal after some number of flips.

 

Example 1:

Input: [[0,1],[1,1]]
Output: 1
Explanation: After flipping no values, 1 row has all values equal.

Example 2:

Input: [[0,1],[1,0]]
Output: 2
Explanation: After flipping values in the first column, both rows have equal values.

Example 3:

Input: [[0,0,0],[0,0,1],[1,1,0]]
Output: 2
Explanation: After flipping values in the first two columns, the last two rows have equal values.

 

Note:

    1 <= matrix.length <= 300
    1 <= matrix[i].length <= 300
    All matrix[i].length's are equal
    matrix[i][j] is 0 or 1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    /*string to_string1(vector<int>v){
        string res="";
        for(int i=0;i<v.size();i++){
            res+=(v[i]+'0');
        }
        return res;
    }*/
    int maxEqualRowsAfterFlips(vector<vector<int>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int ans=0;
        for(int i=0;i<n;i++){
            int cnt=0;
            vector<int>flip(m);
            for(int j=0;j<m;j++){
                flip[j]=1-matrix[i][j];
            }
            //string temp1=to_string1(matrix[i]);
            //string temp2=to_string1(flip);
            for(int k=0;k<n;k++){
                //string ref=to_string1(matrix[k]);
                if(matrix[k]==matrix[i] || matrix[k]==flip){
                    cnt++;
                }
            }
            ans=max(ans,cnt);
        }
        return ans;
    }
};
