For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.

Now given a string representing n, you should return the smallest good base of n in string format.

Example 1:

Input: "13"
Output: "3"
Explanation: 13 base 3 is 111.

 

Example 2:

Input: "4681"
Output: "8"
Explanation: 4681 base 8 is 11111.

 

Example 3:

Input: "1000000000000000000"
Output: "999999999999999999"
Explanation: 1000000000000000000 base 999999999999999999 is 11.

 

Note:

    The range of n is [3, 10^18].
    The string representing n is always valid and will not have leading zeros.
---------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    typedef unsigned long long ll;
    ll helper(ll num, ll d){
        // binary search over base for given length of bits.
        ll l = 2; ll r = (pow(num, 1.0 / d) + 1);
        while(l <= r){
            ll mid = (l + (r - l) / 2);
            ll sum = 0, cur = 1;
            for(int i = 0; i <= d; i++){
                sum += cur;
                cur *= mid;
            }
            if(sum == num)  {
                cout<<d<<endl;
                return mid; 
            }
            if(sum > num) r = mid - 1;
            else l = mid + 1;
        }
        return 0;
    }
    string smallestGoodBase(string n) {
        ll num = stoll(n);
        // looping of number of digits.
        // we want smallest base which has largest no of digits.
        ll maxLen = (log(num) / log(2)) + 1;
            for(ll i = maxLen; i >= 1; i--){   
               ll cur = helper(num, i);
               if(cur != 0) return to_string(cur);
        }
        return to_string(num - 1);
    }
};
