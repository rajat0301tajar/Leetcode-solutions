In a given 2D binary array A, there are two islands.  (An island is a 4-directionally connected group of 1s not connected to any other 1s.)

Now, we may change 0s to 1s so as to connect the two islands together to form 1 island.

Return the smallest number of 0s that must be flipped.  (It is guaranteed that the answer is at least 1.)

 

Example 1:

Input: [[0,1],[1,0]]
Output: 1

Example 2:

Input: [[0,1,0],[0,0,0],[0,0,1]]
Output: 2

Example 3:

Input: [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1

 

Note:

    1 <= A.length = A[0].length <= 100
    A[i][j] == 0 or A[i][j] == 1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<vector<bool>>visited;
    int dirs[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};
    void dfs(int x, int y, vector<vector<int>> &A, queue<pair<int, int>>&q){
        int n = A.size(); int m = A[0].size();
        if(A[x][y] != 1) return;
        if(visited[x][y]) return;
        visited[x][y] = true;
        q.push({x, y});
        for(auto dir : dirs){
            int nx = x + dir[0];
            int ny = y + dir[1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
            dfs(nx, ny, A, q);
        }
    }
    int shortestBridge(vector<vector<int>>& A) {
        int n = A.size();
        if(n == 0) return 0;
        int m = A[0].size();
        visited.resize(n, vector<bool>(m, false));
        bool found = false;
        queue<pair<int, int>>q;
        for(int i = 0; i < n; i++){
            if(found) break;
            for(int j = 0; j < m; j++){
                if(A[i][j]){
                    found = true;
                    dfs(i, j, A, q);
                    break;
                }
            }
        }
        // implement bfs.
        int ret = 0;
        while(!q.empty()){
            int sz = q.size();
            while(sz--){
                auto temp = q.front();
                q.pop();
                int x = temp.first; 
                int y = temp.second;
                for(auto dir : dirs){
                    int nx = x + dir[0];
                    int ny = y + dir[1];
                    if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
                    if(visited[nx][ny]) continue;
                    if(A[nx][ny] == 1 && !visited[nx][ny]){
                        return ret;
                    }
                    q.push({nx, ny});
                    visited[nx][ny] = true;
                }
            }
            ret++;
        }
        return 0;
    }
};
