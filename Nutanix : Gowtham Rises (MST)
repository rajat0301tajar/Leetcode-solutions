#include<bits/stdc++.h>
using namespace std;
typedef long long int64;
int uf[100001];
int find1(int x){
    if(uf[x] == x) return uf[x];
    uf[x] = find1(uf[x]);
    return uf[x];
}
void union1(int x, int y){
    if(find1(x) == find1(y)) return;
    uf[find1(x)] = uf[find1(y)];
}
int solve(int n, vector<vector<int>> &A, int cost){
    priority_queue<vector<int>, vector<vector<int>>,greater<vector<int>>>pq;
    int num = A.size();
    for(int i = 0; i < num; i++){
        pq.push({A[i][2], A[i][0], A[i][1]});
    }
    int c = 0;
    while(c < n){
        pq.push({cost, 0, ++c});
    }
    int ret = 0;
    while(!pq.empty()){
        auto temp = pq.top();
        pq.pop();
        int x = temp[1], y = temp[2];
        if(find1(x) != find1(y)){
            ret += temp[0];
            union1(x, y);
        }
    }
    return ret;
}
int main(){
    int T; cin >> T;

    while(T--){
        int N, R, c, r;
        cin >> N >> R >> c >> r;
        vector<vector<int>>connections;
        for(int i = 0; i <= N; i++){
            uf[i] = i;
        }
        for(int i = 0; i < R; i++){
            int x, y; cin >> x >> y;
            connections.push_back({x, y, r});
        }
        cout << solve(N, connections, c) << endl;
    }
    return 0;
}
