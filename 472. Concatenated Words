Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

Example:

Input: ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]

Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]

Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
 "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
-------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    static bool comp(string w1, string w2){
        return w1.size() < w2.size();
    }
    bool canForm(string x, set<string>&st){
        if(st.size() == 0){
            return false;
        }
        int n = x.size();
        int dp[n + 1];
        memset(dp,0,sizeof(dp));
        dp[0] = 1;
        for(int i = 1; i <= n; i++){
            for(int j = i - 1; j >= 0; j--){
                if(!dp[j]) continue;
                if(st.count(x.substr(j , i - j))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {
        sort(words.begin(), words.end(), comp);
        int n = words.size();
        set<string>st;
        vector<string>ret;
        for(int i = 0; i < n; i++){
            if(canForm(words[i], st)){
                ret.push_back(words[i]);
            }
            st.insert(words[i]);
        }
        return ret;
    }
};
