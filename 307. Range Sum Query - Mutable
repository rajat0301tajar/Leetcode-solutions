Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.

Example:

Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8

Note:

    The array is only modifiable by the update function.
    You may assume the number of calls to update and sumRange function is distributed evenly.
---------------------------------------------------------------------------------------------------------------------------
SEGMENT TREE IMPLEMENTATION:
#define MAX 1000000
class NumArray {
public:
    int st[MAX];
    vector<int>a;
    void build(int tidx,int lo,int hi)
    {
        if(lo==hi){
            st[tidx]=a[lo];
            return;
        }
        int mid=(lo+hi)/2;
        build(2*tidx,lo,mid);
        build(2*tidx+1,mid+1,hi);
        st[tidx]=st[2*tidx]+st[2*tidx+1];
    }
    void updateST(int tidx,int lo,int hi,int aidx,int val)
    {
        if(lo==hi){
            st[tidx]=val;
            return;
        }
        int mid=(lo+hi)/2;
        if(aidx<=mid){
            updateST(2*tidx,lo,mid,aidx,val);
        }
        else
            updateST(2*tidx+1,mid+1,hi,aidx,val);
        st[tidx]=st[2*tidx]+st[2*tidx+1];
    }
    int query(int tidx,int lo,int hi,int rangeL,int rangeR)
    {
        if(rangeL==lo && rangeR==hi){
            return st[tidx];
        }
        int mid=(lo+hi)/2;
        if(rangeR<=mid)
            return query(2*tidx,lo,mid,rangeL,rangeR);
        else if(rangeL>mid)
            return query(2*tidx+1,mid+1,hi,rangeL,rangeR);
        int leftPart=query(2*tidx,lo,mid,rangeL,mid);
        int rightPart=query(2*tidx+1,mid+1,hi,mid+1,rangeR);
        return leftPart + rightPart;
    }
    NumArray(vector<int> nums) {
        for(int i=0;i<nums.size();i++){
            a.push_back(nums[i]);
        }   
        if(a.size()!=0)
        build(1,0,nums.size()-1);
    }
    
    void update(int i, int val) {
        if(a.size()!=0)
        updateST(1,0,a.size()-1,i,val);
    }
    
    int sumRange(int i, int j) {
        if(a.size()!=0)
        return query(1,0,a.size()-1,i,j);
        return 0;
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
