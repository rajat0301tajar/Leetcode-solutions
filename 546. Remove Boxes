Given several boxes with different colors represented by different positive numbers.
You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k >= 1), remove them and get k*k points.
Find the maximum points you can get.

Example 1:
Input:

[1, 3, 2, 2, 2, 3, 4, 3, 1]

Output:

23

Explanation:

[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)
------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        int dp[n][n][n + 1];
        memset(dp,0,sizeof(dp));
        // dp[i][j][k] = max points gained on deleting boxes[i ... j] given there are k same boxes as boxes[i] before ith box.
        for(int i = 0; i < n; i++){
            for(int k = 0; k <= n; k++){
                dp[i][i][k] = (k + 1) * (k + 1);
            }
        }
        for(int l = 2; l <= n; l++){
            for(int i = 0; i < n - l + 1; i++){
                int j = i + l - 1;
                for(int k = 0; k <= i; k++){
                    int res = (k + 1) * (k + 1) + dp[i + 1][j][0];
                    // on deleting ith box i + 1 has 0 same color box on left for dp[i][j][k]
                    for(int m = i + 1; m <= j; m++){
                        if(boxes[i] == boxes[m])
                            res = max(res, dp[i + 1][m - 1][0] + dp[m][j][k + 1]);
                    }
                    dp[i][j][k] = res;
                }
            }
        }
        return dp[0][n - 1][0];
    }
};
