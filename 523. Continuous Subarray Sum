Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

 

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
---------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        int cur = 0;
        int n = nums.size(); 
        k = abs(k);
         if (n <= 1) return false;
        // Two continuous "0" will form a subarray which has sum = 0. 0 * k == 0 will always be true.
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == 0 && nums[i + 1] == 0) return true;
        }
        if(k == 0) return false;
        mp[0] = -1;
        for(int i = 0; i < n; i++){
            cur += nums[i];
            int m = 1;
          for(int j = (cur / k) * k; j >= k; j -= k){
                if(mp.count(cur - j) && abs(mp[cur - j] - i) >= 2){
                    return true;
                }
            }
            if(mp.count(cur) == 0)
            mp[cur] = i;
        }
        return false;
    }
};
