Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from the vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices it jumps randomly to one of them with the same probability, otherwise, when the frog can not jump to any unvisited vertex it jumps forever on the same vertex. 

The edges of the undirected tree are given in the array edges, where edges[i] = [fromi, toi] means that exists an edge connecting directly the vertices fromi and toi.

Return the probability that after t seconds the frog is on the vertex target.

 

Example 1:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666 
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
const int maxn = 110;
double prob[maxn][maxn];
// prob[i] = probability to reach node i from node 1.
// prob[child[i]] = prob[i] * (1 / (no of children of i))
// first calculate for parent then calculate for the children.
int depth[maxn];
bool leaf[maxn];
class Solution {
public:
    unordered_map<int, vector<int>> mp;
    void dfs(int root, int parent, int time){
        int n = 0;
        depth[root] = time;
        for(auto x : mp[root]){
            if(x == parent) continue;
            n++;
        }
        leaf[root] = (!n);
        for(auto x : mp[root]){
            if(x == parent) continue;
            prob[x][time + 1] = (double) prob[root][time] / (n);
        }
        for(auto x : mp[root]){
            if(x == parent) continue;
            dfs(x, root, time + 1);
        }
    }
    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {
        for(auto v : edges){
            mp[v[0]].push_back(v[1]);
            mp[v[1]].push_back(v[0]);
        }
        depth[1] = 0;
        prob[1][0] = 1;
        dfs(1, 0, 0);
        if(depth[target] > t) return 0;
        if(!leaf[target] && depth[target] < t) return 0; 
        return prob[target][depth[target]];
    }
};
