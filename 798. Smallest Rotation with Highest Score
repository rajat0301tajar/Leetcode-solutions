Given an array A, we may rotate it by a non-negative integer K so that the array becomes A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1].  Afterward, any entries that are less than or equal to their index are worth 1 point. 

For example, if we have [2, 4, 1, 3, 0], and we rotate by K = 2, it becomes [1, 3, 0, 2, 4].  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].

Over all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.

Example 1:
Input: [2, 3, 1, 4, 0]
Output: 3
Explanation:  
Scores for each K are listed below: 
K = 0,  A = [2,3,1,4,0],    score 2
K = 1,  A = [3,1,4,0,2],    score 3
K = 2,  A = [1,4,0,2,3],    score 3
K = 3,  A = [4,0,2,3,1],    score 4
K = 4,  A = [0,2,3,1,4],    score 3

So we should choose K = 3, which has the highest score.

 

Example 2:
Input: [1, 3, 0, 2, 4]
Output: 0
Explanation:  A will always have 3 points no matter how it shifts.
So we will choose the smallest K, which is 0.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    // for A[5] = 9 ---> left = (5 + 10 - 9 + 1 = 7) , right = ( 6 );
    // A[7]-- , A[6] ++, A[0] --;
   // -1 0 0 0 0 0 1 -1 0 0 ---> -1 -1 -1 -1 -1 -1 0 -1 -1 -1 0
    // for A[5] = 9 --> if  i do 0 rotation 1 loss, 1 rot 1 loss, 2 rot 1 loss, 6 rot 0 loss,... 9 rot 1 loss.
    // A[5] = 6;
      // bad should be --> -1 -1 -1 -1 -1 -1 0 0 0 0 0
    // left --> A[5] --> (0)   right --> A[9] --> (6)
     // bad --> -1 0 0 0 0 0 1 0 0 0 0 --> -1 -1 -1 -1 -1 -1 0 0 0 0 0
    int bestRotation(vector<int>& A) { 
        int n = A.size();
        vector<int>bad(n);
        for(int i = 0; i < n; i++){
            // after these many shifts we get to last bad position idx = A[i] - 1.
            int left = (i + n - A[i] + 1) % n;            //  i + n - A[i] + 1
            // after 'i' these many shifts we get to the first bad position 0.
            // we go one further. to get first good pos.
            int right = (i + 1) % n; // min rot to get to good pos.
            bad[left]--;
            bad[right]++;
            if(left > right)
                bad[0]--;
        }
        
        int best = - n;
        int ans = 0, cur = 0;
        for(int i = 0; i < n; i++){
            cur += bad[i];
            if(cur > best){
                best = cur;
                ans = i;
            }
        }
        return ans;
    }
};
