You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].

Example:

Input: [5,2,6,1]
Output: [2,1,1,0] 
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    vector<int> count;
    void merge(vector<int> &nums, vector<int> &indexes, int start, int end){
        int mid = (start + end) / 2;
        int left_index = start; 
        int right_index = mid + 1;
        int rightCount = 0;
        vector<int>new_indexes(end - start + 1);
        int sort_idx = 0;
        while(left_index <= mid && right_index <= end){
            if(nums[indexes[right_index]] < nums[indexes[left_index]]){
                new_indexes[sort_idx] = indexes[right_index];
                right_index++;
                rightCount++;
            }
            else{
                new_indexes[sort_idx] = indexes[left_index];
                count[indexes[left_index]] += rightCount;
                left_index++;
            }
            sort_idx ++;
        }
        while(left_index <= mid){
            new_indexes[sort_idx] = indexes[left_index];
            count[indexes[left_index]] += rightCount;
            left_index++;
            sort_idx++;
        }
        while(right_index <= end){
            new_indexes[sort_idx++] = indexes[right_index++];
        }
        for(int i = start; i <= end; i++){
            indexes[i] = new_indexes[i - start];
        }
    }
    void mergesort(vector<int> &nums, vector<int> &indexes, int start, int end){
        if(end <= start){
            return;
        }
        int mid = (start + end) / 2;
        mergesort(nums, indexes, start, mid);
        mergesort(nums, indexes, mid + 1, end);
        merge(nums, indexes, start, end);
    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<int> ret;
        int n = nums.size();
        count.resize(n);
        vector<int> indexes(n);
        for(int i = 0; i < n; i++){
            indexes[i] = i;
        }
        mergesort(nums, indexes, 0, n - 1);
        for(int i = 0; i < n; i++){
            ret.push_back(count[i]);
        }
        return ret;
    }
};
