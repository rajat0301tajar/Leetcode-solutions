 Given two integers n and k, you need to construct a list which contains n different positive integers ranging from 1 to n and obeys the following requirement:
Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.

If there are multiple answers, print any of them.

Example 1:

Input: n = 3, k = 1
Output: [1, 2, 3]
Explanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.

Example 2:

Input: n = 3, k = 2
Output: [1, 3, 2]
Explanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.

Note:

    The n and k are in the range 1 <= k < n <= 104.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
APPROACH : When k = n-1\text{k = n-1}k = n-1, a valid construction is [1, n, 2, n-1, 3, n-2, ....]\text{[1, n, 2, n-1, 3, n-2, ....]}[1, n, 2, n-1, 3, n-2, ....]. One way to see this is, we need to have a difference of n-1\text{n-1}n-1, which means we need 1\text{1}1 and n\text{n}n adjacent; then, we need a difference of n-2\text{n-2}n-2, etc.

Also, when k = 1\text{k = 1}k = 1, a valid construction is [1, 2, 3, ..., n]\text{[1, 2, 3, ..., n]}[1, 2, 3, ..., n].

class Solution {
public:
    vector<int> constructArray(int n, int k) {
        vector<int>ans(n);
        int c = 0;
        // for inserting the first n - k - 1 values.
        for(int v = 1; v < n - k; v++){
            ans[c++] = v;  
        }
        // left values --> n - k --> n --> (total k + 1 values)
        for(int i = 0; i <= k; i++){
            ans[c++] = (i % 2 == 0) ? (n - k + i / 2) : (n - i / 2);
        }  
        return ans;
    }
};
