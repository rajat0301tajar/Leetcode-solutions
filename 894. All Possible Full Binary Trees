A full binary tree is a binary tree where each node has exactly 0 or 2 children.

Return a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.

Each node of each tree in the answer must have node.val = 0.

You may return the final list of trees in any order.

 

Example 1:

Input: 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Explanation:
Note:

    1 <= N <= 20
------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<int, vector<TreeNode *>>mp;
    vector<TreeNode*> allPossibleFBT(int N) {
        vector<TreeNode *>v;
        if(mp.count(N)) return mp[N];
        if(N == 1){
            mp[N].push_back(new TreeNode(0));
        }
        else if(N & 1){
            for(int x = 0; x < N; x++){
                int y = N - 1 - x;
                for(TreeNode *left : allPossibleFBT(x)){
                    for(TreeNode *right : allPossibleFBT(y)){
                        TreeNode *bns = new TreeNode(0);
                        bns->left = left;
                        bns->right = right;
                        mp[N].push_back(bns);
                    }
                }
            }
        }
        return mp[N];
    }
};
