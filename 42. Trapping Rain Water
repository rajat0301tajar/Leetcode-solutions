Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int trap(vector<int>& h) {
        int n = h.size();
        if(n == 0) return 0;
        int l[n]; // stores max height to the left of i including i.
        int r[n]; // stores max height to the right of i including i.
        l[0] = h[0];
        r[n - 1] = h[n - 1];
        for(int i = 1; i < n; i++){
            l[i] = max(l[i - 1], h[i]);
        }
        for(int i = n - 2; i >= 0; i--){
            r[i] = max(r[i + 1], h[i]);
        }
        int ret = 0;
        for(int i = 1; i < n - 1; i++){
            ret += min(l[i], r[i]) - h[i];
        }
        return ret;
    }
};

2nd approach using STACKS :::
int trap(vector<int>& height)
{
    int ans = 0, current = 0;
    stack<int> st;
    while (current < height.size()) {
        while (!st.empty() && height[current] > height[st.top()]) {
            int top = st.top();
            st.pop();
            if (st.empty())
                break;
            int distance = current - st.top() - 1;
            int bounded_height = min(height[current], height[st.top()]) - height[top];
            ans += distance * bounded_height;
        }
        st.push(current++);
    }
    return ans;
}
