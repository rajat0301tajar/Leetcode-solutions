Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

Input: nums = 
[
  [9,9,4],
  [6,6,8],
  [2,1,1]
] 
Output: 4 
Explanation: The longest increasing path is [1, 2, 6, 9].

Example 2:

Input: nums = 
[
  [3,4,5],
  [3,2,6],
  [2,2,1]
] 
Output: 4 
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
public:
    int dirs[4][2] = {{1,0},{0,1},{-1,0},{0,-1}};
    int dp[1000][1000];
    vector<vector<int>> A;
    int dfs(int x, int y, int n, int m){
        if(dp[x][y] != -1) return dp[x][y];
        int mx = 1;
        for(auto dir : dirs){
            int nx = x + dir[0];
            int ny = y + dir[1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m) continue;
            if(A[x][y] >= A[nx][ny]) continue;
            mx = max(mx, 1 + dfs(nx, ny, n, m));
        }
        return dp[x][y] = mx;
    }
    int longestIncreasingPath(vector<vector<int>>& A) {
        int ret = 0;
        this->A = A;
        memset(dp, -1, sizeof(dp));
        int n = A.size(); if(n == 0) return 0;
        int m = A[0].size();
        int mx = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                mx = max(mx, dfs(i, j, n, m));
            }
        }
        return mx;
    }
};
